{"version":3,"file":"892.js","mappings":"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","names":["i0","FilterComponent","constructor","privilegiosService","this","EventEmitter","Util","MessagesError","guardar","ngOnInit","values","Array","filter","length","fill","validation","getPrivilegios","subscribe","data","arrPrivilegios","setPrivilegios","tree","temp","menuP","parentprivilegio","status","idprivilegio","namebuttom","etiqueta","getValuesAction","array","i","existe_error","item","value","type","push","id","forEach","element","util","errorToast","messages","_FILTER","getValues","emit","flag","save","console","log","clean","elements","document","querySelectorAll","option","unfocus","a","getVisible","visible","visibleAdd","filterList","obj","compare","accept","Object","entries","key","toLocaleLowerCase","includes","object","split","exist","keyObject","valueObject","fa","entry","isList","getSelectedValue","set","setListValue","keyList","arrayObj","entryObj","icon","pattern","text","index","valid","match","selectors","ctx","SolicitudesComponent","route","BehaviorSubject","orderRouteLink$","String","getDataForList","$event","getCheckBoxData","getEventIcon","descripcion","navigate","goPrueba","getValuesFilter","delay","ms","Promise","resolve","setTimeout","Forma","IdStructure","init","assign","DocumentService","UtilHttpService","injector","super","port","PORT_DOCUMENTS","getForms","get","URL_MODULE_DOCUMENTS","SERVICE_GET_FORMS","getSections","idStructure","put","factory","_filter","opt","filterValue","toLowerCase","routes","path","component","canActivate","AuthGuardGuard","breadcrumb","privilegio","roles","RoleBaseAuthorization","TemplateSolicitudesComponent","_formSolicitud","documentService","group","folio","FormControl","Validators","alias","forma","estatus","version","asignado","comentarios","letter","names","getFormsAndClean","formGroupOptions","formularioSolicitudes","valueChanges","pipe","startWith","map","_filterGroup","getFormId","response","model","str","formName","name","formasId","formGroups","toString","sort","b","sector","formGroups2","result","getSectionById","tabs","sectionName","structure","sectionStructure","sections","sectionStructures","setSectionsValidators","setDisabledFields","section","validations","required","charsAllowed","lengthMaximum","lengthMinimum","valueMaximum","valueMinimum","formForma","addControl","control","defaultValue","enableToEdit","disable","getFormControl","controlName","controls","getFormControlDinamico","requiredDinamico","controlname","ret","errors","getComponentType","valueBelongsTo","dataType","ProyectosRoutingModule","RouterModule","moment","_rollupMoment__default","MAT_MOMENT_DATE_ADAPTER_OPTIONS","InjectionToken","providedIn","MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY","useUtc","range","valueFunction","valuesArray","MomentDateAdapter","DateAdapter","dateLocale","_options","setLocale","locale","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getYear","date","clone","year","getMonth","month","getDate","getDayOfWeek","day","getMonthNames","style","getDateNames","getDayOfWeekNames","getYearName","getFirstDayOfWeek","getNumDaysInMonth","daysInMonth","_createMoment","isValid","today","parse","parseFormat","displayFormat","addCalendarYears","years","add","addCalendarMonths","addCalendarDays","days","toIso8601","deserialize","Date","isDateInstance","ISO_8601","isMoment","invalid","strict","utc","ɵfac","MAT_DATE_LOCALE","ɵprov","MAT_MOMENT_DATE_FORMATS","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","MomentDateModule","ɵmod","ɵinj","provide","useClass","deps","MatMomentDateModule","MAT_DATE_FORMATS","useValue","imports","ProyectosModule","CommonModule","FormsModule","ReactiveFormsModule","ShareModule","MatTabsModule","MatAutocompleteModule","AngularDualListBoxModule","MatDatepickerModule"],"sourceRoot":"webpack:///","sources":["./src/app/share-modules/filter/filter.component.html","./src/app/share-modules/filter/filter.component.ts","./src/app/modules/proyectos/solicitudes/solicitudes.component.ts","./src/app/modules/proyectos/solicitudes/solicitudes.component.html","./src/app/models/vo.ts","./src/app/service/documents.service.ts","./src/app/modules/proyectos/template-solicitudes/template-solicitudes.component.html","./src/app/modules/proyectos/template-solicitudes/template-solicitudes.component.ts","./src/app/modules/proyectos/proyectos-routing.module.ts","./node_modules/@angular/material-moment-adapter/fesm2020/material-moment-adapter.mjs","./src/app/modules/proyectos/proyectos.module.ts"],"sourcesContent":["<div class=\"accordion\" id=\"accordionExample\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n                Filtros\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <form>\r\n                <div class=\"accordion-body\">\r\n                    <div class=\"panel\">\r\n                        <div class=\"mb-4 col\">\r\n                            <div class=\"mb-4 row\" *ngFor=\"let item of filter; let i = index\">\r\n                                <label class=\"filter-label\" class=\"stilo col-sm-3 col-form-label\" for=\"bDescripcion\">{{item.label}}:</label>\r\n                                <div class=\"col-sm-9\">\r\n                                    <input *ngIf='!isList(item.type)' class=\"form-control\" type=\"{{item.type}}\" [(ngModel)]='values[i]' placeholder='{{item.placeholder}}' [pattern]=\"item.pattern\" (blur)=unfocus(item.type,i,$event); (keyup)=pattern(values[i],i,item.pattern) #txtName>\r\n                                    <select required *ngIf='isList(item.type)' #selectList class=\"form-control filter-input\" (change)=\"getSelectedValue(selectList.value,i)\">\r\n                                        <option selected disabled hidden value = ''>{{item.placeholder}}</option>\r\n                                        <option *ngFor=\"let list of item.list; let j = index\" >\r\n                                            {{setListValue(list,item.listKey)}}\r\n                                        </option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class=\"text-danger\" *ngfor='!validation[i]'>\r\n                                    Not Valid Data\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\" class=\"mb-3 col\">\r\n                            <div class=\"form-check\">\r\n                                <input class=\"form-check-input\" [(ngModel)]=\"save.guardar\" (click)=\"clean()\" matTooltip=\"Guardar\" matTooltipClass=\"tooltipMat\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\">\r\n                                <label class=\"form-check-label\" for=\"gridCheck1\">Guardar como filtro predeterminado</label>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <div class=\"col\">\r\n                                <button class=\"btn btn-info btn-blue\" (click)=getValuesAction() matTooltip=\"Filtrar\" matTooltipClass=\"tooltipMat\">\r\n                                     {{namebuttom}}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!-- <hr class=\"hr-text\"> -->","import { MessagesError, Util } from 'src/app/utilities/util';\r\nimport { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { filterObject } from '../../models/filterObject';\r\nimport { ControlContainer } from '@angular/forms';\r\nimport { Privilegios } from 'src/app/models/login';\r\nimport { Menu, NavItem } from 'src/app/models/privilegiosConf';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\nimport { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-filter',\r\n  templateUrl: './filter.component.html', \r\n  styleUrls: ['./filter.component.css']\r\n})\r\n\r\nexport class FilterComponent implements OnInit {\r\n\r\n  model: NgbDateStruct;\r\n  // Lista de objetos tipo filterObject el cual contiene\r\n  // los datos para generar los Input necesarios para el filtro;\r\n  @Input() filter: filterObject[] = [];\r\n\r\n  // Id del filtro\r\n  @Input() idFilter: string = 'filter';\r\n\r\n  // Id del filtro\r\n  @Input() data: any = [];\r\n\r\n  //Lista que regresa un arreglo\r\n  //con el JSON = {key: id del filterObject , Value : valor puesto en el input correspondiende al id del filterObjecto}\r\n  @Output() getValues: any = new EventEmitter<any>();\r\n\r\n  @Output() visibleAdd: any = new EventEmitter<any>();\r\n\r\n  private util = new Util();\r\n  messages: MessagesError = new MessagesError();\r\n  visible: any = false;\r\n  values: any = [];\r\n  validation: any = [];\r\n  flag: any=[];\r\n  arrPrivilegios :Array<Privilegios>;\r\n  menuItemAdmin:Array<Menu>=[]\r\n  navItem:Array<NavItem> = [];\r\n  constructor(private privilegiosService: PrivilegiosServiceService) { }\r\n  namebuttom: String = \"\";\r\n  save: any = {\r\n    guardar: false\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    this.values = new Array(this.filter.length);\r\n    this.values.fill('', 0, this.filter.length);\r\n    this.validation = new Array(this.filter.length);\r\n    this.validation.fill(true, 0, this.filter.length);\r\n\r\n    this.privilegiosService.getPrivilegios().subscribe((data)=>{\r\n      this.arrPrivilegios = data;\r\n      \r\n    });\r\n    this.privilegiosService.setPrivilegios();\r\n\r\n    let util = new Util();\r\n    util.tree(this.arrPrivilegios,0)\r\n\r\n    let temp = this.arrPrivilegios.filter((menuP)=>{\r\n      return menuP.parentprivilegio == 102 && menuP.status == 1 && menuP.idprivilegio == 260\r\n      // menuP.descripcion.includes('Menu principal')\r\n    })\r\n      this.namebuttom = temp[0].etiqueta;\r\n  }\r\n\r\n  getValuesAction() {\r\n    let array = [];\r\n    let i = 0;\r\n    let existe_error = false;\r\n    for (const item of this.filter) {\r\n      let value = '';\r\n      if (item.type == 'date') {\r\n        if (this.values[i] != ' ') {\r\n          // value =  this.util.formatDateToStringFormat(this.values[i]);\r\n          value = this.values[i];\r\n        }\r\n      } else {\r\n        value = this.values[i];\r\n      }\r\n      array.push({ id: item.id, value: value });   \r\n      i++;\r\n    }\r\n    this.validation.forEach(element => {\r\n      if (element == false) {\r\n        existe_error = true;\r\n      }\r\n    });\r\n    if (!existe_error) {\r\n      this.getValues.emit(array);\r\n    } else {\r\n      this.util.errorToast(this.messages._FILTER);\r\n    }\r\n    this.flag = this.save.guardar\r\n    console.log(this.flag);\r\n  }\r\n  \r\n\r\n\r\n  clean() {\r\n    let elements: any = document.querySelectorAll(\"select\");\r\n    for (let i = 0; i < elements.length; i++) {\r\n      let option: any = elements[i].querySelectorAll(\"option\");\r\n      elements[i].value = option[0].value;\r\n      console.log(elements[i]);\r\n      \r\n    }\r\n    this.values.fill('', 0, this.filter.length);\r\n    this.validation.fill(true, 0, this.filter.length);\r\n    this.getValuesAction();\r\n  }\r\n\r\n  unfocus(type: any, i: any, a: any) {\r\n    if (type == 'date') {\r\n      if (this.values[i] == '') {\r\n        this.values[i] = ' ';\r\n      }\r\n      else if (this.values[i] == ' ') {\r\n        this.values[i] = '';\r\n      }\r\n    }\r\n  }\r\n\r\n  getVisible() {\r\n    if (this.visible == true) {\r\n      this.visible = false;\r\n      this.visibleAdd.emit(true);\r\n      this.clean();\r\n    } else {\r\n      this.visible = true;\r\n      this.visibleAdd.emit(false);\r\n    }\r\n  }\r\n\r\n  filterList(array: any) {\r\n    let list = this.data.filter(function (obj: any) {\r\n      if (compare(obj, array)\r\n      ) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n    return list;\r\n  }\r\n\r\n\r\n  isList(type: any) {\r\n    return type == 'list';\r\n  }\r\n\r\n\r\n  getSelectedValue(a: any, i: any) {\r\n    this.values[i] = a;\r\n  }\r\n  \r\n  set(a: any, i: any) {\r\n    this.values[i] = a;\r\n  }\r\n  \r\n  setListValue(entry: any, keyList: any) {\r\n    if (keyList != null) {\r\n      const arrayObj = Object.entries(entry);\r\n      for (const entryObj of arrayObj) {\r\n        const key = entryObj[0];\r\n        const value = entryObj[1];\r\n        if (key == keyList) {\r\n          return value;\r\n        }\r\n      }\r\n    } else { return entry }\r\n\r\n  }\r\n\r\n  icon(icon: string) {\r\n    if (icon == null || icon == '') {\r\n      return false;\r\n    }\r\n    else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  pattern(text: string, index: any, pattern: any) {\r\n    if (pattern == null) { pattern = '.*' }\r\n    const valid = text.match(pattern);\r\n    if (text == '') {\r\n      this.validation[index] = true;\r\n      return;\r\n    }\r\n    if (valid != null) {\r\n      if (valid[0].length != text.length) {\r\n        this.validation[index] = false;\r\n      } else { this.validation[index] = true }\r\n    } else { this.validation[index] = false }\r\n  }\r\n}\r\n\r\nfunction compare(obj: any, array: any) {\r\n  let accept: any = [];\r\n  array.forEach((element: any) => {\r\n    Object.entries(obj).forEach(([key, value]) => {\r\n      if (typeof value !== 'object' || value == null) {\r\n        if (key == element.id) {\r\n          if ((('' + value).toLocaleLowerCase()).includes(element.value.toLocaleLowerCase())) {\r\n            accept.push(true);\r\n          } else {\r\n            accept.push(false);\r\n          }\r\n        }\r\n      } else {\r\n        const object = element.id.split('.');\r\n        if (object[0] == key) {\r\n          let exist = false;\r\n          Object.entries(value).forEach(([keyObject, valueObject]) => {\r\n            if (object[1] == keyObject) {\r\n              exist = true;\r\n              if ((('' + valueObject).toLocaleLowerCase()).includes(element.value.toLocaleLowerCase())) {\r\n                accept.push(true);\r\n              } else {\r\n                accept.push(false);\r\n              }\r\n            }\r\n          });\r\n          if (!exist) {\r\n            if ((element.value.toLocaleLowerCase() == '')) {\r\n              accept.push(true);\r\n            } else {\r\n              accept.push(false);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    });\r\n  });\r\n\r\n  let fa = true;\r\n  accept.forEach((entry: any) => {\r\n    if (!entry) {\r\n      fa = false;\r\n    }\r\n  });\r\n  return fa;\r\n  \r\n}\r\n\r\n","import { ChangeDetectorRef, Component, OnInit, OnChanges } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filterObject } from 'src/app/models/filterObject';\r\n\r\n@Component({\r\n  selector: 'app-solicitudes',\r\n  templateUrl: './solicitudes.component.html',\r\n  styleUrls: ['./solicitudes.component.css']\r\n})\r\nexport class SolicitudesComponent implements OnInit {\r\n\r\n  idFilter: string =\"solicitudes\";\r\n  cabecera:Array<any>=[];\r\n  cabeceraFilter:Array<any>=[];\r\n  filas:Array<any>=[];\r\n  deleteReference :Array<string>=[]; \r\n  filterList: filterObject[] = [];\r\n  paginado = 10;\r\n  dataReference=[];\r\n  orderRouteLink$ = new BehaviorSubject<any[] | string>([]);\r\n\r\n  constructor(\r\n    private route:Router,\r\n    ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.orderRouteLink$ = String [\"/home\"];\r\n  }\r\n\r\n  getDataForList($event){}\r\n  getCheckBoxData($event){}\r\n\r\n  getEventIcon($event){\r\n    let evento = $event;\r\n\r\n    if(evento.descripcion == \"Crear solicitud\"){\r\n      this.route.navigate(['/home/proyectos/template-solicitudes']);\r\n    }\r\n  }\r\n\r\n  goPrueba(){\r\n    this.route.navigate([\"/home/proyectos/template-solicitudes\"]);\r\n  }\r\n\r\n  getValuesFilter($event){}\r\n\r\n  public delay(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n}\r\n","<app-filter \r\n[idFilter]=idFilter \r\n[filter]=filterList \r\n(getValues)=getValuesFilter($event)>\r\n</app-filter>\r\n<div class=\"space\"></div>\r\n<div class=\"accordion\" id=\"accordionSolicitudes\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingUno\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseUno\" aria-expanded=\"false\" aria-controls=\"collapseUno\">\r\n                Solicitudes\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseUno\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingUno\" data-bs-parent=\"#accordionSolicitudes\">\r\n            <app-table-component \r\n                [tableFor]=\"'solicitudes'\" \r\n                [th_rows]=\"cabecera\" \r\n                [filas]=\"filas\"\r\n                [setData]='filas' \r\n                [paginado]=\"paginado\" \r\n                (emitData)=\"getDataForList($event)\" \r\n                (emitArrayData)=\"getCheckBoxData($event)\" \r\n                (emitEventData)=\"getEventIcon($event)\">\r\n            </app-table-component>\r\n        </div>\r\n    </div>\r\n</div>","export class user {\r\n    id: number;\r\n    description: string;\r\n}\r\nexport class profile {\r\n    id: number;\r\n    description: string;\r\n}\r\nexport class status {\r\n    id: number;\r\n    description: string;\r\n}\r\nexport class idCatParentValue {\r\n  id: number;\r\n  description: string;\r\n}\r\n\r\nexport class Forma {\r\n    name: string;\r\n    id: number;\r\n}\r\n\r\nexport class IdStructure{\r\n    idStructure: number = null;\r\n  \r\n    constructor(init?: Partial<IdStructure>) {\r\n      Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class sectionStructure{\r\n    charsAllowed?: string;\r\n    dataType: string;\r\n    defaultValue:string;\r\n    enableToEdit: boolean;\r\n    fieldDescription: string;\r\n    fieldName: string;\r\n    idStructure: number;\r\n    labelValue: string;\r\n    order: number\r\n    required: boolean;\r\n    sectionName: string;\r\n    valueComparision: string;\r\n    valueMaximum: number;\r\n    valueMinimum: number;\r\n    valueBelongsTo?: Array<CatalogTypes>;\r\n    viewComponent: string;\r\n  \r\n    constructor(init?: Partial<sectionStructure>) {\r\n      Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class CatalogTypes{\r\n    idCatCatalogTypes: number;\r\n    parentValue: number;\r\n    value: string;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { IdStructure } from '../models/vo';\r\nimport { UtilHttpService } from '../utilities/util-http.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DocumentService extends UtilHttpService {\r\n\r\nconstructor(injector: Injector) {\r\n    super(injector);\r\n    this.port = this.PORT_DOCUMENTS;\r\n}\r\n\r\ngetForms<Response>(): Observable<Response> {\r\n    return super.get(this.URL_MODULE_DOCUMENTS + this.SERVICE_GET_FORMS);\r\n}\r\n\r\ngetSections<Response>(id: number): Observable<any> {\r\n    let idStructure = new IdStructure();\r\n    idStructure.idStructure = id;\r\n    return super.put(this.URL_MODULE_DOCUMENTS + \"/getFields\", idStructure);\r\n}\r\n\r\n}","<section>\r\n    <div class=\"accordion\" id=\"accordionSolicitudes\">\r\n        <div class=\"accordion-item\">\r\n            <h2 class=\"accordion-header\" id=\"headingUno\">\r\n                <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseUno\" aria-expanded=\"false\" aria-controls=\"collapseUno\">\r\n                    Generales del documento de solicitud\r\n                </button>\r\n            </h2>\r\n            <!-- <div class=\"space\"></div> -->\r\n            <div id=\"collapseUno\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingUno\" data-bs-parent=\"#accordionSolicitudes\">\r\n                <form [formGroup]=\"formularioSolicitudes\">\r\n                    <div class=\"accordion-body\">\r\n                        <div class=\"panel\">\r\n                            <!-- Folio -->\r\n                            <div class=\"mb-3 row\">\r\n                                <label class=\"col-sm-2 col-form-label\">Folio:</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <div class=\"\">\r\n                                        <input type=\"text\" class=\"form-control\" id=\"Folio\" formControlName=\"folio\" \r\n                                        [ngClass]=\"{ 'is-invalid': (getFormControl('folio').touched || \r\n                                                                    getFormControl('folio').dirty) && \r\n                                                                    getFormControl('folio').invalid}\" \r\n                                        [attr.disabled]=\"true\">\r\n                                    </div>\r\n                                    <div class=\"text-danger\" *ngIf=\"(getFormControl('folio').touched || \r\n                                                 getFormControl('folio').dirty) && \r\n                                                 getFormControl('folio').invalid\">\r\n                                        <div><small>*Campo requerido</small></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <!-- Alias -->\r\n                            <div class=\"mb-3 row\">\r\n                                <label class=\"col-sm-2 col-form-label\">Alias:</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <div>\r\n                                        <input type=\"text\" class=\"form-control\" id=\"Alias\" formControlName=\"alias\" \r\n                                        [ngClass]=\"{ 'is-invalid': (getFormControl('alias').touched ||  \r\n                                                                    getFormControl('alias').dirty) && \r\n                                                                    getFormControl('alias').invalid}\">\r\n                                    </div>\r\n                                    <div *ngIf=\"(getFormControl('alias').touched ||  \r\n                                                 getFormControl('alias').dirty) && \r\n                                                 getFormControl('alias').invalid\">\r\n                                        <div class=\"text-danger\" *ngIf=\"getFormControl('alias').errors.required\">\r\n                                            <div><small>*Campo requerido</small></div>\r\n                                        </div>\r\n                                        <div class=\"text-danger\" *ngIf=\"(getFormControl('alias').touched &&\r\n                                            getFormControl('alias').invalid)\">\r\n                                            <div><small>*Formato Inválido</small></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <!-- Forma -->\r\n                            <div class=\"mb-3 row\">\r\n                                <label class=\"col-sm-2 col-form-label\">Forma:</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <input type=\"text\" class=\"form-control\" id=\"Forma\" formControlName=\"forma\"\r\n                                    matInput\r\n                                    [matAutocomplete]=\"autoGroup\"\r\n                                    [ngClass]=\"{ 'is-invalid': (getFormControl('forma').touched ||  \r\n                                                                    getFormControl('forma').dirty) && \r\n                                                                    getFormControl('forma').invalid}\">\r\n                                    <mat-autocomplete #autoGroup=\"matAutocomplete\">\r\n                                        <mat-optgroup *ngFor=\"let group of formGroupOptions | async\" [label]=\"group.letter\">\r\n                                            <mat-option *ngFor=\"let name of group.names\" \r\n                                                [value]=\"name\">\r\n                                                {{name}}\r\n                                            </mat-option>\r\n                                        </mat-optgroup>\r\n                                    </mat-autocomplete>\r\n                                    <div class=\"text-danger\" *ngIf=\"(getFormControl('forma').touched ||  \r\n                                                getFormControl('forma').dirty) && \r\n                                                getFormControl('forma').invalid\">\r\n                                        <div><small>*Campo requerido</small></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <!-- Estatus -->\r\n                            <div class=\"mb-3 row\">\r\n                                <label class=\"col-sm-2 col-form-label\">Estatus:</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <div>\r\n                                        <input type=\"text\" class=\"form-control\" id=\"Estatus\" formControlName=\"estatus\" \r\n                                        [ngClass]=\"{ 'is-invalid': (getFormControl('estatus').touched ||  \r\n                                                                    getFormControl('estatus').dirty) && \r\n                                                                    getFormControl('estatus').invalid}\"\r\n                                        placeholder=\"Draft\" [attr.disabled]=\"true\">\r\n                                    </div>\r\n                                    <div class=\"text-danger\" *ngIf=\"(getFormControl('estatus').touched ||  \r\n                                                getFormControl('estatus').dirty) && \r\n                                                getFormControl('estatus').invalid\">\r\n                                        <div><small>*Campo requerido</small></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <!-- Versión -->\r\n                            <div class=\"mb-3 row\">\r\n                                <label class=\"col-sm-2 col-form-label\">Versión:</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <div>\r\n                                        <input type=\"text\" class=\"form-control\" id=\"Version\" formControlName=\"version\" \r\n                                        [ngClass]=\"{ 'is-invalid': (getFormControl('version').touched ||  \r\n                                                                    getFormControl('version').dirty) && \r\n                                                                    getFormControl('version').invalid}\"\r\n                                        [attr.disabled]=\"true\">\r\n                                    </div>\r\n                                    <div  class=\"text-danger\" *ngIf=\"(getFormControl('version').touched ||  \r\n                                                getFormControl('version').dirty) && \r\n                                                getFormControl('version').invalid\">\r\n                                        <div><small>*Campo requerido</small></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <!-- Asignado a -->\r\n                            <div class=\"mb-3 row\">\r\n                                <label class=\"col-sm-2 col-form-label\">Asignado a:</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <div>\r\n                                        <input type=\"text\" class=\"form-control\" id=\"Asignado\" formControlName=\"asignado\" \r\n                                        [ngClass]=\"{ 'is-invalid': (getFormControl('asignado').touched || \r\n                                                                    getFormControl('asignado').dirty) && \r\n                                                                    getFormControl('asignado').invalid}\">\r\n                                    </div>\r\n                                    <div class=\"text-danger\" *ngIf=\"(getFormControl('asignado').touched ||  \r\n                                                getFormControl('asignado').dirty) && \r\n                                                getFormControl('asignado').invalid\">\r\n                                        <div><small>*Campo requerido</small></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <!-- Comentarios -->\r\n                            <div class=\"mb-3 row\">\r\n                                <label class=\"col-sm-2 col-form-label\">Comentarios:</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <div>\r\n                                        <textarea class=\"form-control\" name=\"\" id=\"Comentarios\" cols=\"30\" rows=\"5\" formControlName=\"comentarios\" \r\n                                        [ngClass]=\"{ 'is-invalid': (getFormControl('comentarios').touched ||  \r\n                                                                    getFormControl('comentarios').dirty) && \r\n                                                                    getFormControl('comentarios').invalid}\">\r\n                                        </textarea>\r\n                                    </div>\r\n                                    <div  class=\"text-danger\" *ngIf=\"(getFormControl('comentarios').touched ||  \r\n                                                getFormControl('comentarios').dirty) && \r\n                                                getFormControl('comentarios').invalid\">\r\n                                        <div><small>*Máximo 250 caracteres</small></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <!-- botones -->\r\n                            <div class=\"mb-3 row\">\r\n                                <div class=\"col-sm-10 m-2\">\r\n                                    <button class=\"btn btn-primary\">Guardar</button>\r\n                                    <button class=\"btn btn-primary\">Solicitar Aprobación</button>\r\n                                </div>\r\n                            </div>\r\n                            <!-- <div class=\"col-sm-6\">\r\n                                <input [matDatepicker]=\"basicDatepicker\" class=\"form-control\">\r\n                                <mat-datepicker-toggle [for]=\"basicDatepicker\"></mat-datepicker-toggle>\r\n                                <mat-datepicker #basicDatepicker></mat-datepicker>\r\n                            </div> -->\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"space\"></div>\r\n    <div class=\"accordion\" id=\"accordionForma\">\r\n        <div class=\"accordion-item\">\r\n            <h2 class=\"accordion-header\" id=\"headingDos\">\r\n                <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseDos\" aria-expanded=\"false\" aria-controls=\"collapseDos\">\r\n                    Datos de la forma\r\n                </button>\r\n            </h2>\r\n            <!-- <div class=\"space\"></div> -->\r\n            <div id=\"collapseDos\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingDos\" data-bs-parent=\"#accordionForma\">\r\n                <!-- Secciones -->\r\n                <mat-tab-group [selectedIndex]=\"selected.value\" (selectedIndexChange)=\"selected.setValue($event)\">\r\n                    <mat-tab *ngFor=\"let tab of tabs; let index = index\" [label]=\"tab\">\r\n                        <form [formGroup]=\"formForma\">\r\n                            <div class=\"accordion-body\">\r\n                                <div class=\"panel\">\r\n                                    <div class=\"mb-3 row\" *ngFor=\"let section of sectionStructures[index]\">\r\n                                        <label class=\"col-sm-4 col-form-label\">{{section.fieldName}}</label>\r\n                                        <div class=\"col-sm-8\">\r\n                                            <div class=\"\" *ngIf=\"getComponentType(section)=='Input'\">\r\n                                                <div class=\"input-wrapper\">\r\n                                                    <!-- <span class=\"icon\">\r\n                                                        <i class=\"fas fa-edit\"></i>\r\n                                                    </span> -->\r\n                                                    <input class=\"form-control\"\r\n                                                        formControlName=\"{{section.idStructure}}\"\r\n                                                        type=\"{{section.dataType}}\"\r\n                                                        [ngClass]=\"\r\n                                                            { 'is-invalid': \r\n                                                                (getFormControlDinamico(section.idStructure).touched ||  \r\n                                                                getFormControlDinamico(section.idStructure).dirty) && \r\n                                                                getFormControlDinamico(section.idStructure).invalid\r\n                                                            }\"> \r\n                                                </div>\r\n                                                <div class=\"text-danger\" \r\n                                                    *ngIf=\"(getFormControlDinamico(section.idStructure).touched && \r\n                                                            requiredDinamico(section.idStructure) == true)\">\r\n                                                    <div><small>*Campo requerido</small></div>\r\n                                                </div>\r\n                                                <div class=\"text-danger\" \r\n                                                    *ngIf=\"(getFormControlDinamico(section.idStructure).touched &&\r\n                                                            getFormControlDinamico(section.idStructure).invalid)\">\r\n                                                    <div><small>*Formato Inválido</small></div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div class=\"\" *ngIf=\"getComponentType(section)=='Combo'\">\r\n                                                <div class=\"input-group form-group\">\r\n                                                    <!-- <span class=\"icon\">\r\n                                                        <i class=\"fas fa-list\"></i>\r\n                                                    </span> -->\r\n                                                    <select class=\"form-control filter-input\"\r\n                                                        formControlName=\"{{section.idStructure}}\"\r\n                                                        [ngClass]=\"\r\n                                                            { 'is-invalid':\r\n                                                                getFormControlDinamico(section.idStructure).touched &&\r\n                                                                getFormControlDinamico(section.idStructure).invalid\r\n                                                            }\"\r\n                                                    >\r\n                                                        <option \r\n                                                            disabled=\"true\"\r\n                                                            selected\r\n                                                            class=\"optionExample\"\r\n                                                            [ngValue]=\"null\">\r\n                                                            Seleccione una Opción\r\n                                                        </option>\r\n                                                        <option \r\n                                                            *ngFor=\"let list of section.valueBelongsTo\"\r\n                                                            [ngValue]=\"list.value\">\r\n                                                            {{list.value}}\r\n                                                        </option>\r\n                                                    </select>\r\n                                                </div>\r\n                                                <div class=\"text-danger\" \r\n                                                    *ngIf=\"(getFormControlDinamico(section.idStructure).touched && \r\n                                                            requiredDinamico(section.idStructure) == true)\">\r\n                                                    <div><small>*Campo requerido</small></div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <div class=\"\" *ngIf=\"getComponentType(section)=='Date'\">\r\n                                                <div class=\"input-wrapper\">\r\n                                                    <!-- <span class=\"icon\">\r\n                                                        <i class=\"fas fa-edit\"></i>\r\n                                                    </span> -->\r\n                                                    <input \r\n                                                        [matDatepicker]=\"basicDatepicker\" \r\n                                                        placeholder=\"dd/mmm/yyyy\"\r\n                                                        class=\"form-control\"\r\n                                                        formControlName=\"{{section.idStructure}}\"\r\n                                                        [ngClass]=\"\r\n                                                            { 'is-invalid': \r\n                                                                (getFormControlDinamico(section.idStructure).touched ||  \r\n                                                                getFormControlDinamico(section.idStructure).dirty) && \r\n                                                                getFormControlDinamico(section.idStructure).invalid\r\n                                                            }\">\r\n                                                    <mat-datepicker-toggle [for]=\"basicDatepicker\"></mat-datepicker-toggle>\r\n                                                    <mat-datepicker #basicDatepicker></mat-datepicker>\r\n                                                </div>\r\n                                                <div class=\"text-danger\" \r\n                                                    *ngIf=\"(getFormControlDinamico(section.idStructure).touched && \r\n                                                            requiredDinamico(section.idStructure) == true)\">\r\n                                                    <div><small>*Campo requerido</small></div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div> \r\n                            </div>\r\n                        </form>\r\n                    </mat-tab>\r\n                </mat-tab-group>\r\n                <!-- espacio -->\r\n                <div class=\"space\"></div>\r\n                <!-- botones -->\r\n                <!-- <div class=\"mb-3 row\">\r\n                    <div class=\"col-sm-10 m-2\">\r\n                        <button class=\"btn btn-primary\">Guardar</button>\r\n                        <button class=\"btn btn-primary\">Solicitar Aprobación</button>\r\n                    </div>\r\n                </div> -->\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"space\"></div>\r\n    <div class=\"accordion\" id=\"accordionReferencia\">\r\n        <div class=\"accordion-item\">\r\n            <h2 class=\"accordion-header\" id=\"headingTres\">\r\n                <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTres\" aria-expanded=\"false\" aria-controls=\"collapseTres\">\r\n                    Referencia del documento de solicitud\r\n                </button>\r\n            </h2>\r\n            <!-- <div class=\"space\"></div> -->\r\n            <div id=\"collapseTres\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingTres\" data-bs-parent=\"#accordionReferencia\">\r\n    \r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, FormGroup, ValidatorFn, Validators } from '@angular/forms';\r\nimport { map, Observable, startWith } from 'rxjs';\r\nimport { Forma, sectionStructure } from 'src/app/models/vo';\r\nimport { DocumentService } from '../../../service/documents.service';\r\nimport { IdStructure } from '../../../models/vo';\r\n\r\nexport interface FormaGroup {\r\n  letter: string;\r\n  names: string[];\r\n}\r\n\r\nexport const _filter = (opt: string[], value: string): string[] => {\r\n  const filterValue = value.toLowerCase();\r\n  return opt.filter(item => item.toLowerCase().includes(filterValue));\r\n};\r\n\r\n@Component({\r\n  selector: 'app-template-solicitudes',\r\n  templateUrl: './template-solicitudes.component.html',\r\n  styleUrls: ['./template-solicitudes.component.css']\r\n})\r\nexport class TemplateSolicitudesComponent implements OnInit {\r\n\r\n  public formForma: FormGroup = this._formSolicitud.group({ });\r\n  public formularioSolicitudes: FormGroup = this._formSolicitud.group({\r\n    folio: new FormControl('', Validators.required),\r\n    alias: new FormControl('', [\r\n      Validators.required,\r\n      Validators.maxLength(150),\r\n      Validators.minLength(2),\r\n    ]),\r\n    forma: new FormControl('', Validators.required),\r\n    estatus: new FormControl('', Validators.required),\r\n    version: new FormControl('', Validators.required),\r\n    asignado: new FormControl(),\r\n    comentarios: new FormControl('', Validators.maxLength(250)),\r\n  });\r\n\r\n  public tabs = [];\r\n  public sectionStructures: Array<any> = new Array<any>();\r\n  public formasId: Array<Forma> = new Array<Forma>();\r\n  public selected = new FormControl(0);\r\n  private validations: Array<ValidatorFn>;\r\n\r\n  public formGroups: FormaGroup[] = [\r\n    { letter: 'A', names: [] },\r\n    { letter: 'B', names: [] },\r\n    { letter: 'C', names: [] },\r\n    { letter: 'D', names: [] },\r\n    { letter: 'E', names: [] },\r\n    { letter: 'F', names: [] },\r\n    { letter: 'G', names: [] },\r\n    { letter: 'H', names: [] },\r\n    { letter: 'I', names: [] },\r\n    { letter: 'J', names: [] },\r\n    { letter: 'K', names: [] },\r\n    { letter: 'L', names: [] },\r\n    { letter: 'M', names: [] },\r\n    { letter: 'N', names: [] },\r\n    { letter: 'O', names: [] },\r\n    { letter: 'P', names: [] },\r\n    { letter: 'Q', names: [] },\r\n    { letter: 'R', names: [] },\r\n    { letter: 'S', names: [] },\r\n    { letter: 'T', names: [] },\r\n    { letter: 'U', names: [] },\r\n    { letter: 'V', names: [] },\r\n    { letter: 'W', names: [] },\r\n    { letter: 'X', names: [] },\r\n    { letter: 'Y', names: [] },\r\n    { letter: 'Z', names: [] }\r\n  ];\r\n\r\n  public formGroups2: FormaGroup[] = [];\r\n  public formGroupOptions: Observable<FormaGroup[]>;\r\n  \r\n  constructor(\r\n    private _formSolicitud: FormBuilder,\r\n    private documentService: DocumentService,)\r\n    { }\r\n\r\n  ngOnInit(): void {\r\n    this.getFormsAndClean();\r\n\r\n    //Autocomplete\r\n    this.formGroupOptions = this.formularioSolicitudes.get('forma')!.valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this._filterGroup(value || '')),\r\n    );\r\n    \r\n    this.formularioSolicitudes.get('forma').valueChanges.subscribe(value => {\r\n      this.getFormId(value); \r\n    });\r\n  }\r\n\r\n  public getFormsAndClean(){\r\n    this.documentService.getForms().subscribe((response: Array<any>) => {\r\n      for(let index in response){\r\n        let model: Forma = new Forma;\r\n        let str = response[index].formName;\r\n        model.name = str;\r\n        model.id = response[index].idStructure;\r\n        this.formasId.push(model);\r\n        \r\n        this.formGroups.map(group => {\r\n          if(group.letter == (str[0])){\r\n            group.names.push(response[index].formName.toString());\r\n            group.names.sort((a, b) => 0 - (a > b ? -1 : 1));\r\n          }\r\n        });\r\n      }\r\n\r\n      this.formGroups.forEach((sector: FormaGroup) => {\r\n        if(sector.names.length == 0){\r\n          sector.letter = \"\"\r\n          sector.names = [];\r\n        } else {\r\n          this.formGroups2.push(sector);\r\n        }\r\n      });\r\n      \r\n      this.formGroups.length = 0;\r\n      this.formGroups2.forEach(result => {\r\n        this.formGroups.push(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  public getFormId(value: string){\r\n    let id: number;\r\n    this.formasId.forEach(forma => {\r\n      if(value == forma.name){\r\n        id = forma.id;\r\n      } else {\r\n        id = 0;\r\n      }\r\n      if (id != 0){\r\n        this.getSectionById(id);\r\n      }\r\n    });\r\n  }\r\n\r\n  public getSectionById(id){\r\n    this.documentService.getSections(id).subscribe(response => {\r\n      this.tabs = [];\r\n      response.forEach(element => {\r\n        this.tabs.push(element.sectionName);\r\n        let structure: Array<sectionStructure> = new Array<sectionStructure>();\r\n        element.sectionStructure.forEach(sections => {\r\n          structure.push(sections);\r\n        });\r\n        this.sectionStructures.push(structure);\r\n      });\r\n      this.setSectionsValidators();\r\n      this.setDisabledFields();\r\n    });\r\n  }\r\n\r\n  public setSectionsValidators(){\r\n    this.sectionStructures.forEach(section => {\r\n      section.forEach(element => {\r\n      \r\n        console.log(element);\r\n        \r\n        //Push reglas\r\n        this.validations = new Array<ValidatorFn>();\r\n\r\n        if(element.required == true){\r\n          this.validations.push(Validators.required);\r\n        }\r\n        try {\r\n          if(element.charsAllowed.length > 0){\r\n            this.validations.push(Validators.pattern(\"([a-zA-Z])|[á,é,í,ó,ú,ü]\"));\r\n          }\r\n        } catch(error){}\r\n        try {\r\n          if(element.lengthMaximum > 0)\r\n            this.validations.push(Validators.maxLength(element.lengthMaximum));\r\n        } catch (error) {}\r\n        try {\r\n          if(element.lengthMinimum > 0)\r\n            this.validations.push(Validators.minLength(element.lengthMinimum));\r\n        } catch (error) {}\r\n        try {\r\n          if(element.valueMaximum > 0)\r\n            this.validations.push(Validators.max(element.valueMaximum));\r\n        } catch (error) {}\r\n        try {\r\n          if(element.valueMinimum > 0)\r\n            this.validations.push(Validators.min(element.valueMinimum));\r\n        } catch (error) {}\r\n\r\n        this.formForma.addControl(element.idStructure.toString(), \r\n          this._formSolicitud.control(element.defaultValue, this.validations));\r\n\r\n      }); \r\n    });\r\n  }\r\n\r\n  public setDisabledFields(){\r\n    this.sectionStructures.forEach(section => {\r\n      section.forEach(element => {\r\n        if(element.enableToEdit != true)\r\n          this.formForma.get(element.idStructure.toString()).disable();\r\n      });\r\n    });\r\n  }\r\n\r\n  public getFormControl(controlName: string): AbstractControl {\r\n    return this.formularioSolicitudes.controls[controlName];\r\n  }\r\n\r\n  public getFormControlDinamico(controlName: string): AbstractControl {\r\n    return this.formForma.controls[controlName.toString()];\r\n  }\r\n\r\n  public requiredDinamico(controlname: string): boolean{\r\n    let ret: boolean;\r\n    try {\r\n      if(this.getFormControlDinamico(controlname).errors.required == true)\r\n        ret = true;\r\n      else \r\n        ret =  false;\r\n    } catch (error){ }\r\n\r\n    return ret;\r\n  }\r\n  \r\n  private _filterGroup(value: string): FormaGroup[] {\r\n    if (value) {\r\n      return this.formGroups\r\n        .map(group => ({letter: group.letter, names: _filter(group.names, value)}))\r\n        .filter(group => group.names.length > 0);\r\n    }\r\n    return this.formGroups;\r\n  }\r\n\r\n  public getComponentType(section) : string{\r\n    let ret: string;\r\n    try {\r\n      if (section.valueBelongsTo.length >= 0){\r\n        ret = \"Combo\";\r\n      }\r\n    } catch (error) {\r\n      if(section.dataType == \"date\"){\r\n        ret = \"Date\";\r\n      } else if(section.dataType == \"text\"){\r\n        ret = \"Input\";\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  public delay(ms: number) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuardGuard } from 'src/app/utilities/auth-guard.guard';\r\nimport { RoleBaseAuthorization } from '../../models/login';\r\nimport { SolicitudesComponent } from './solicitudes/solicitudes.component';\r\nimport { TemplateSolicitudesComponent } from './template-solicitudes/template-solicitudes.component';\r\n\r\nconst routes: Routes = [{\r\n    path: 'solicitudes', \r\n    component: SolicitudesComponent,\r\n    canActivate:[AuthGuardGuard],\r\n    data:{ \r\n      breadcrumb: null,\r\n      privilegio:\"254\", \r\n      roles:[ \r\n        RoleBaseAuthorization.ADMIN,\r\n        RoleBaseAuthorization.COORDINADOR,\r\n        RoleBaseAuthorization.EJECUTIVO_PROYECTOS,\r\n     ]\r\n    }\r\n  },{\r\n    path: 'template-solicitudes', \r\n    component: TemplateSolicitudesComponent,\r\n    canActivate:[AuthGuardGuard],\r\n    data:{ \r\n      breadcrumb:'Crear solicitud', \r\n      roles:[ \r\n        RoleBaseAuthorization.ADMIN,\r\n        RoleBaseAuthorization.COORDINADOR,\r\n        RoleBaseAuthorization.EJECUTIVO_PROYECTOS,\r\n      ]\r\n    }\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProyectosRoutingModule { }","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst moment = _rollupMoment__default || _rollupMoment;\n/** InjectionToken for moment date adapter to configure options. */\nconst MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n    return {\n        useUtc: false,\n    };\n}\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n    const valuesArray = Array(length);\n    for (let i = 0; i < length; i++) {\n        valuesArray[i] = valueFunction(i);\n    }\n    return valuesArray;\n}\n/** Adapts Moment.js Dates for use with Angular Material. */\nclass MomentDateAdapter extends DateAdapter {\n    constructor(dateLocale, _options) {\n        super();\n        this._options = _options;\n        this.setLocale(dateLocale || moment.locale());\n    }\n    setLocale(locale) {\n        super.setLocale(locale);\n        let momentLocaleData = moment.localeData(locale);\n        this._localeData = {\n            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n            longMonths: momentLocaleData.months(),\n            shortMonths: momentLocaleData.monthsShort(),\n            dates: range(31, i => this.createDate(2017, 0, i + 1).format('D')),\n            longDaysOfWeek: momentLocaleData.weekdays(),\n            shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n        };\n    }\n    getYear(date) {\n        return this.clone(date).year();\n    }\n    getMonth(date) {\n        return this.clone(date).month();\n    }\n    getDate(date) {\n        return this.clone(date).date();\n    }\n    getDayOfWeek(date) {\n        return this.clone(date).day();\n    }\n    getMonthNames(style) {\n        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    getDateNames() {\n        return this._localeData.dates;\n    }\n    getDayOfWeekNames(style) {\n        if (style == 'long') {\n            return this._localeData.longDaysOfWeek;\n        }\n        if (style == 'short') {\n            return this._localeData.shortDaysOfWeek;\n        }\n        return this._localeData.narrowDaysOfWeek;\n    }\n    getYearName(date) {\n        return this.clone(date).format('YYYY');\n    }\n    getFirstDayOfWeek() {\n        return this._localeData.firstDayOfWeek;\n    }\n    getNumDaysInMonth(date) {\n        return this.clone(date).daysInMonth();\n    }\n    clone(date) {\n        return date.clone().locale(this.locale);\n    }\n    createDate(year, month, date) {\n        // Moment.js will create an invalid date if any of the components are out of bounds, but we\n        // explicitly check each case so we can throw more descriptive errors.\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (month < 0 || month > 11) {\n                throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n            }\n            if (date < 1) {\n                throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n            }\n        }\n        const result = this._createMoment({ year, month, date }).locale(this.locale);\n        // If the result isn't valid, the date must have been out of bounds for this month.\n        if (!result.isValid() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n        }\n        return result;\n    }\n    today() {\n        return this._createMoment().locale(this.locale);\n    }\n    parse(value, parseFormat) {\n        if (value && typeof value == 'string') {\n            return this._createMoment(value, parseFormat, this.locale);\n        }\n        return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    format(date, displayFormat) {\n        date = this.clone(date);\n        if (!this.isValid(date) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('MomentDateAdapter: Cannot format invalid date.');\n        }\n        return date.format(displayFormat);\n    }\n    addCalendarYears(date, years) {\n        return this.clone(date).add({ years });\n    }\n    addCalendarMonths(date, months) {\n        return this.clone(date).add({ months });\n    }\n    addCalendarDays(date, days) {\n        return this.clone(date).add({ days });\n    }\n    toIso8601(date) {\n        return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     */\n    deserialize(value) {\n        let date;\n        if (value instanceof Date) {\n            date = this._createMoment(value).locale(this.locale);\n        }\n        else if (this.isDateInstance(value)) {\n            // Note: assumes that cloning also sets the correct locale.\n            return this.clone(value);\n        }\n        if (typeof value === 'string') {\n            if (!value) {\n                return null;\n            }\n            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n        }\n        if (date && this.isValid(date)) {\n            return this._createMoment(date).locale(this.locale);\n        }\n        return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n        return moment.isMoment(obj);\n    }\n    isValid(date) {\n        return this.clone(date).isValid();\n    }\n    invalid() {\n        return moment.invalid();\n    }\n    /** Creates a Moment instance while respecting the current UTC settings. */\n    _createMoment(date, format, locale) {\n        const { strict, useUtc } = this._options || {};\n        return useUtc ? moment.utc(date, format, locale, strict) : moment(date, format, locale, strict);\n    }\n}\nMomentDateAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MomentDateAdapter, deps: [{ token: MAT_DATE_LOCALE, optional: true }, { token: MAT_MOMENT_DATE_ADAPTER_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nMomentDateAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MomentDateAdapter });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MomentDateAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DATE_LOCALE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_MOMENT_DATE_FORMATS = {\n    parse: {\n        dateInput: 'l',\n    },\n    display: {\n        dateInput: 'l',\n        monthYearLabel: 'MMM YYYY',\n        dateA11yLabel: 'LL',\n        monthYearA11yLabel: 'MMMM YYYY',\n    },\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MomentDateModule {\n}\nMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MomentDateModule });\nMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MomentDateModule, providers: [\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n        },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        {\n                            provide: DateAdapter,\n                            useClass: MomentDateAdapter,\n                            deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\n                        },\n                    ],\n                }]\n        }] });\nclass MatMomentDateModule {\n}\nMatMomentDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatMomentDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMomentDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.0\", ngImport: i0, type: MatMomentDateModule, imports: [MomentDateModule] });\nMatMomentDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatMomentDateModule, providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }], imports: [MomentDateModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.0\", ngImport: i0, type: MatMomentDateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MomentDateModule],\n                    providers: [{ provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MOMENT_DATE_ADAPTER_OPTIONS, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_FORMATS, MatMomentDateModule, MomentDateAdapter, MomentDateModule };\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SolicitudesComponent } from './solicitudes/solicitudes.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ProyectosRoutingModule } from './proyectos-routing.module';\r\nimport { ShareModule } from 'src/app/share-modules/share-modules.module';\r\nimport { AppRoutingModule } from 'src/app/app-routing.module';\r\nimport { AngularDualListBoxModule } from 'angular-dual-listbox';\r\nimport { TemplateSolicitudesComponent } from './template-solicitudes/template-solicitudes.component';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SolicitudesComponent,\r\n    TemplateSolicitudesComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    ProyectosRoutingModule,\r\n    ShareModule,\r\n    MatTabsModule,\r\n    MatAutocompleteModule,\r\n    AngularDualListBoxModule,\r\n    MatDatepickerModule,\r\n    MatMomentDateModule,\r\n    \r\n  ]\r\n})\r\nexport class ProyectosModule { }\r\n"],"x_google_ignoreList":[9]}