{"version":3,"file":"560.js","mappings":"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","names":["filterObject","constructor","this","pattern","filterObject2","init","Object","assign","UsuariosListComponent","userService","route","guardar","borrar","ngOnInit","getDataUsers","subscribe","result","filas","data","listUsers","config","forEach","element","isVisible","cabecera","push","headerGrid","deleteReference","deleteData","setFilterConfig","paginado","maxcount","sistema","password","filterList","setFilter","toLowerCase","id","label","placeholder","typeInput","list","listKey","icon","filterObj","type","console","log","element2","split","deleteProperty","element3","deleteDataFilter","getValuesFilter","event","filters","Array","i","model","value","map","toString","replace","substring","length","json","JSON","parse","getDataFilter","listUsersDto","cabecerasFilter","cabeceraFilter","property","Reflect","has","getDataForList","navigate","undefined","getCheckBoxData","dataReference","viewUser","getEventIcon","idprivilegio","i0","selectors","ctx","UsuarioComponent","_formB","privilegiosService","group","idUser","FormControl","userName","name","firstLastName","secondLastName","email","estatus","lastLoginDate","nameButton","val","nameBtn","statusButton","user","userData","formularioGeneral","getFormularioGeneral","ngAfterViewInit","sessionUser","dataUsuario","Validators","lastLogin","getFormControl","controlName","controls","valid","util","Util","msg","Messages","upDateData","response","bottomStartOk","MSG_EMERGENTE_TRANSACCION_OK","error","bottomEndError","RestablecerPassComponent","modificationDate","nameButon","butonName","showBtn","formulario","passModificationDate","getNameButon","showButon","PerfilesComponent","loginService","ref","add","remove","all","none","direction","DualListComponent","draggable","locale","btnName","getBtName","nameComponent","forkJoin","getById","getPerfiles","roles","sourceStations","listRoles","confirmedStations","useStations","key","display","keepSorted","source","confirmed","temp","temp2","_$","EditRole","arr","boo","j","agregar","remover","putPerfiles","filterBtn","filter","doDisable","disabled","disableBtn","swapDirection","sourceLeft","format","VistaUsuarioComponent","router","params","referenceNumber","perfil","setTimeout","getAllPrivilegiosArr","privilegioGeneral","Privilegios","searchTree","status","etiqueta","infoHijos","restablecerPassComp","contrasenaComponent","butonContranseName","perfilesComp","showPefilesComponent","keys","nameBtnPerfil","routes","path","redirectTo","pathMatch","component","canActivate","AuthGuardGuard","breadcrumb","page","RoleBaseAuthorization","UsuariosRoutingModule","RouterModule","UsuariosModule","CommonModule","FormsModule","ReactiveFormsModule","ShareModule","AppRoutingModule","PerfilModule","AngularDualListBoxModule"],"sourceRoot":"webpack:///","sources":["./src/app/models/filterObject.ts","./src/app/modules/usuarios/usuarios/usuarios-list/usuarios-list.component.ts","./src/app/modules/usuarios/usuarios/usuarios-list/usuarios-list.component.html","./src/app/modules/usuarios/usuarios/usuario/usuario.component.html","./src/app/modules/usuarios/usuarios/usuario/usuario.component.ts","./src/app/modules/usuarios/usuarios/restablecer-pass/restablecer-pass.component.html","./src/app/modules/usuarios/usuarios/restablecer-pass/restablecer-pass.component.ts","./src/app/modules/usuarios/usuarios/perfiles/perfiles.component.html","./src/app/modules/usuarios/usuarios/perfiles/perfiles.component.ts","./src/app/modules/usuarios/usuarios/vista-usuario/vista-usuario.component.html","./src/app/modules/usuarios/usuarios/vista-usuario/vista-usuario.component.ts","./src/app/modules/usuarios/usuarios-routing.module.ts","./src/app/modules/usuarios/usuarios.module.ts"],"sourcesContent":["\r\nexport class filterObject {\r\n\r\n  id:string ;\r\n  placeholder:string ;\r\n  label:string ;\r\n  type:string ;\r\n  list?:any[];\r\n  pattern?:any;\r\n  icon?:string;\r\n  listKey?:any;\r\n  constructor(){\r\n    this.pattern= '.*';\r\n  }\r\n\r\n}\r\n\r\nexport class filterObject2 {\r\n  id: string;\r\n  value: any;\r\n  isVisible: string;\r\n\r\n  \r\n  constructor(init?: Partial<filterObject2>) {\r\n    Object.assign(this, init);\r\n  }\r\n  \r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../../../service/user.service';\r\nimport { filterObject, filterObject2 } from 'src/app/models/filterObject';\r\nimport { FilterComponent } from '../../../../share-modules/filter/filter.component';\r\nimport { FilterResponse } from '../../../../models/usuario';\r\nimport { AllEvaluation, TimePeriod } from '../../../../models/reports';\r\nimport { faBriefcaseClock } from '@fortawesome/free-solid-svg-icons';\r\nimport { RoleBaseAuthorization } from '../../../../models/login';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-usuarios-list',\r\n  templateUrl: './usuarios-list.component.html',\r\n  styleUrls: ['./usuarios-list.component.css']\r\n})\r\nexport class UsuariosListComponent implements OnInit {\r\n  cabecera:Array<any>=[];\r\n  cabeceraFilter:Array<any>=[];\r\n  filas:Array<any>=[];\r\n  deleteReference :Array<string>=[]; \r\n  idFilter :string='filtro_usuarios';\r\n  filterList: filterObject[] = [];\r\n  paginado = 10;\r\n  dataReference=[];\r\n  perfiles: RoleBaseAuthorization[]=[]\r\n  mask: String = \"\";\r\n  constructor(private userService: UserService, private route:Router) { }\r\n  // save: FilterComponent\r\n  save: any = {\r\n    guardar: true,\r\n    borrar: false\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getDataUsers().subscribe((result)=>{\r\n      this.filas = result['data']['listUsers']\r\n           \r\n      result.data.config.forEach(element => { \r\n        if(element.isVisible == 1){\r\n        this.cabecera.push(element.headerGrid);        \r\n      }else\r\n        this.deleteReference.push(element.headerGrid);        \r\n      });\r\n      this.deleteData();\r\n      this.setFilterConfig();\r\n      this.paginado = result['data']['maxcount']\r\n    })\r\n  }\r\n\r\n  setFilterConfig() {\r\n    let sistema = this.cabecera[5];\r\n    let password = this.cabecera[6];\r\n    \r\n    this.cabecera.forEach(element => {\r\n      if(element != password && element != sistema){\r\n      this.filterList.push(this.setFilter(element,element, 'Ingrese'+' '+ element.toLowerCase(), 'text', null, null, ' ', ' '));\r\n      }else \r\n      this.filterList.push(this.setFilter(element,element, 'Ingrese'+' '+ element.toLowerCase(), 'date', null, null, ' ', ' '));\r\n    });\r\n  }\r\n\r\n  setFilter(id: any, label: any, placeholder: any, typeInput: any, list: any, listKey: any, icon: any, pattern: any): filterObject {\r\n    const filterObj: filterObject = new filterObject();\r\n    filterObj.id = id;\r\n    filterObj.label = label;\r\n    filterObj.placeholder = placeholder;\r\n    filterObj.type = typeInput;\r\n\r\n    return filterObj;\r\n  }\r\n  \r\n  deleteData(){\r\n    console.log(this.deleteReference);\r\n    \r\n    this.deleteReference.forEach(element => {\r\n      if(element == this.deleteReference[0]){\r\n        let element2 = element.split(' ')[1].toLowerCase();\r\n        this.deleteProperty(element2)\r\n      }else\r\n        if(element==this.deleteReference[1]){\r\n         var element3 = element.split(' ')[0].toLowerCase();\r\n         this.deleteProperty(element3)   \r\n      }\r\n    });\r\n  }\r\n\r\n  deleteDataFilter(){\r\n    this.deleteReference.forEach(element => {\r\n      if(element == this.deleteReference[0]){\r\n        let element2 = element.split(' ')[1].toLowerCase();\r\n        this.deleteProperty(element2)\r\n      }else\r\n        if(element==this.deleteReference[1]){\r\n         var element3 = element.split(' ')[0].toLowerCase();\r\n         this.deleteProperty(element3)   \r\n      }\r\n    });\r\n  }\r\n\r\n  getValuesFilter(event){\r\n    let filters: Array<filterObject2> = new Array<filterObject2>();\r\n    event.forEach((element, i) => {\r\n      let model: filterObject2 = new filterObject2();\r\n      model.id = element.id;\r\n      if(element.value == undefined)\r\n        model.value = \"\";\r\n      else\r\n        model.value = element.value;\r\n\r\n      filters.push(model);\r\n    });\r\n    \r\n    let map: string = \"{\";\r\n    filters.forEach(element => {\r\n       map = map + '\"' + element.id.toString() + '\":' + '\"' + element.value.toString() + '\"' + ','\r\n       map=map.replace(/ /g, \"_\");\r\n    });\r\n\r\n    map=map.substring(0,(map.length-1))\r\n    map=map + \"}\"\r\n    \r\n    var json = JSON.parse(map);\r\n    console.log(json);\r\n    \r\n    // this.saveFiltro = json;\r\n\r\n    this.userService.getDataFilter(json).subscribe((result)=>{\r\n      this.filas = result['data']['listUsersDto']\r\n      let cabecerasFilter = result['data']['config']     \r\n      \r\n      cabecerasFilter.forEach(element => {\r\n        if(element.isVisible){\r\n          this.cabeceraFilter.push(element.headerGrid)\r\n        }else{\r\n          this.deleteReference.push(element.headerGrid)  \r\n        }\r\n      });\r\n      this.deleteDataFilter();\r\n    })\r\n  }\r\n\r\n  deleteProperty(property){\r\n    for(let i=0;i<this.filas.length;i++){\r\n      if(Reflect.has(this.filas[i], property)){\r\n        delete this.filas[i][property];        \r\n      }\r\n    }\r\n  }\r\n\r\n  getDataForList(event, id?){\r\n    console.log(event);\r\n    console.log(id);\r\n    let $_id = (event == null || event == undefined) ? id : event.id;\r\n    this.route.navigate(['/home/administracion/usuario/'+$_id]);\r\n  }\r\n\r\n  getCheckBoxData(event){\r\n    console.log(event);\r\n    this.dataReference.length = 0;\r\n    this.dataReference = event;\r\n  }\r\n\r\n  viewUser(){\r\n    if(this.dataReference.length == 1){\r\n      this.getDataForList(null, this.dataReference[0].id)\r\n    }\r\n  }\r\n\r\n  getEventIcon(event){\r\n    switch(event.idprivilegio){\r\n      case 103: this.viewUser();\r\n    }\r\n  }\r\n}\r\n","<app-filter [idFilter]=idFilter [filter]=filterList (getValues)=getValuesFilter($event)>\r\n</app-filter>\r\n\r\n<app-table-component [tableFor]=\"'users'\" [th_rows]=\"cabecera\" [filas]=\"filas\" [setData]='filas' [paginado]=\"paginado\" (emitData)=\"getDataForList($event)\" (emitArrayData)=\"getCheckBoxData($event)\" (emitEventData)=\"getEventIcon($event)\">\r\n</app-table-component>","<div class=\"accordion mt-4\" id=\"accordionExample\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                {{nameComponent}}\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <form [formGroup]=\"formularioGeneral\">\r\n                <div class=\"accordion-body\">\r\n                    <div class=\"panel\">\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Usuario</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"Usuario\" formControlName=\"userName\" [ngClass]=\"{ 'is-invalid': (getFormControl('userName').touched || getFormControl('userName').dirty) && getFormControl('userName').invalid}\" readonly [attr.disabled]=\"true\">\r\n                            </div>\r\n\r\n                            <div *ngIf=\"(getFormControl('userName').touched || getFormControl('userName').dirty) && getFormControl('userName').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Nombre</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"Nombre\" formControlName=\"name\" [ngClass]=\"{ 'is-invalid': (getFormControl('name').touched ||  getFormControl('name').dirty) && getFormControl('name').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('name').touched ||  getFormControl('name').dirty) && getFormControl('name').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Apellido paterno</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"appaterno\" formControlName=\"firstLastName\" [ngClass]=\"{ 'is-invalid': (getFormControl('firstLastName').touched || getFormControl('firstLastName').dirty) && getFormControl('firstLastName').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('firstLastName').touched || getFormControl('firstLastName').dirty) && getFormControl('firstLastName').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Apellido materno</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"appaterno\" formControlName=\"secondLastName\" [ngClass]=\"{ 'is-invalid': (getFormControl('secondLastName').touched || getFormControl('secondLastName').dirty) && getFormControl('secondLastName').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('secondLastName').touched || getFormControl('secondLastName').dirty) && getFormControl('secondLastName').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Correo</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"email\" class=\"form-control\" id=\"correo\" formControlName=\"email\" [ngClass]=\"{ 'is-invalid': (getFormControl('email').touched ||  getFormControl('email').dirty) && getFormControl('email').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('email').touched ||  getFormControl('email').dirty) && getFormControl('email').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                                <div>\r\n                                    <small>*Formato no valido.</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Último acceso</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"correo\" formControlName=\"lastLoginDate\" [ngClass]=\"{ 'is-invalid': (getFormControl('lastLoginDate').touched ||  getFormControl('lastLoginDate').dirty) && getFormControl('lastLoginDate').invalid}\" [attr.disabled]=\"true\">\r\n                            </div>\r\n                        </div>\r\n                        <div class=\" mb-3 row \">\r\n                            <label for=\"inputPassword \" class=\"col-sm-2 col-form-label \">Estatus</label>\r\n                            <div class=\"col-sm-10 \">\r\n                                <div class=\"form-check form-switch\">\r\n                                    <input class=\"form-check-input\" type=\"checkbox\" id=\"mySwitch\" name=\"darkmode\" formControlName=\"estatus\">\r\n                                    <label class=\"form-check-label\" for=\"mySwitch \"></label>\r\n                                </div>\r\n                                <!-- <input class=\"form-check-input \" type=\"checkbox \" id=\"mySwitch \" name=\"Activo \" value=\"yes \"  checked> -->\r\n                                <!-- <input type=\" form-control \" formControlName=\"status \"> -->\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\" *ngIf=\"statusButton\">\r\n                            <div class=\"col-sm-10 m-2\">\r\n                                <button class=\"btn btn-primary\" (click)=\"guardar()\">{{nameBtn}}</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n\r\n</div>","import { AfterViewInit, Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators, AbstractControl } from '@angular/forms';\r\nimport { Privilegios, SessionUser } from 'src/app/models/login';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\nimport { UserService } from 'src/app/service/user.service';\r\nimport { Util, Messages } from 'src/app/utilities/util';\r\n\r\n@Component({\r\n  selector: 'app-usuario',\r\n  templateUrl: './usuario.component.html',\r\n  styleUrls: ['./usuario.component.css']\r\n})\r\nexport class UsuarioComponent implements OnInit, AfterViewInit {\r\n  \r\n  private userData: SessionUser;\r\n  \r\n  @Input()\r\n  nameComponent: string;\r\n  \r\n  @Input()\r\n  set nameButton(val:string){\r\n    this.nameBtn = val;\r\n    this.statusButton = val.length > 0 \r\n  }\r\n  statusButton:boolean= false;\r\n  nameBtn:string = null;\r\n\r\n  @Input()\r\n  set user(val:SessionUser){\r\n\r\n    this.userData = val;\r\n    this.formularioGeneral = this.getFormularioGeneral(val);\r\n \r\n  }\r\n\r\n  disabledUserName=true;\r\n  arrPrivilegios :Array<Privilegios>;\r\n  \r\n  \r\n  statusPass=0\r\n  // nameComponent: string;\r\n  constructor(private _formB: FormBuilder,private userService:UserService,\r\n    private privilegiosService: PrivilegiosServiceService) {}\r\n  \r\n  ngAfterViewInit(): void {\r\n    // throw new Error('Method not implemented.');\r\n\r\n  }\r\n\r\n  public formularioGeneral = this._formB.group({\r\n    idUser: new FormControl(),\r\n    userName: new FormControl(),\r\n    name: new FormControl(),\r\n    firstLastName: new FormControl(),\r\n    secondLastName: new FormControl(),\r\n    email: new FormControl(),\r\n    estatus: new FormControl(),\r\n    lastLoginDate : new FormControl()\r\n  });\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n  }\r\n\r\n  get user():SessionUser{\r\n    return this.userData;\r\n  }\r\n  getFormularioGeneral(sessionUser?: SessionUser) {\r\n    console.log('====================================');\r\n    console.log(sessionUser);\r\n    console.log('====================================');\r\n    const dataUsuario = this._formB.group({\r\n      idUser: [sessionUser == null ? null : sessionUser.idUser, [Validators.nullValidator]],\r\n      userName: [sessionUser == null ? null : sessionUser.userName , [Validators.required]],\r\n      name: [sessionUser == null ? null : sessionUser.name, [Validators.required]],\r\n      firstLastName: [\r\n        sessionUser == null ? null : sessionUser.firstLastName,[Validators.required]\r\n      ],\r\n      secondLastName: [\r\n        sessionUser == null ? null : sessionUser.secondLastName,[Validators.nullValidator]\r\n      ],\r\n      email: [\r\n        sessionUser == null ? null : sessionUser.email,[Validators.email, Validators.required]\r\n      ],\r\n      lastLoginDate :[\r\n        sessionUser == null ? null : sessionUser.lastLogin,[Validators.nullValidator]\r\n      ],\r\n      estatus :[\r\n        sessionUser == null ? null : sessionUser.estatus ==\"Activo\" ? true : false,[Validators.nullValidator]\r\n      ],\r\n    });\r\n    console.log(dataUsuario.value);\r\n    \r\n    return dataUsuario;\r\n  }\r\n\r\n  public getFormControl(controlName: string): AbstractControl {\r\n    return this.formularioGeneral.controls[controlName];\r\n  }\r\n\r\n\r\n  public guardar(){\r\n    console.log(this.formularioGeneral.value)\r\n    if(this.formularioGeneral.valid){\r\n      let util = new Util();\r\n      let msg = new Messages();\r\n      this.userService.upDateData(this.formularioGeneral.value).subscribe((response)=>{\r\n        let data = response['data']\r\n        this.getFormularioGeneral(data)\r\n        this.ngOnInit();\r\n        util.bottomStartOk(msg.MSG_EMERGENTE_TRANSACCION_OK)\r\n\r\n      },error =>{\r\n        util.bottomEndError(\"error\")\r\n      }\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"accordion mt-4\" id=\"accordionDualist\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseDualist\" aria-expanded=\"true\" aria-controls=\"collapseDualist\">\r\n            {{nameComponent}}\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseDualist\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionDualist\">\r\n            <div class=\"container\">\r\n                <div class=\"row mt-3\">\r\n                    <div class=\"col-md-12\">\r\n                        <form [formGroup]=\"formulario\">\r\n                            <div class=\"mb-3 row\">\r\n                                <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Actualizada el :</label>\r\n                                <div class=\"col-sm-10\">\r\n                                    <input type=\"text\" class=\"form-control\" id=\"inputPassword\" formControlName=\"modificationDate\" [attr.disabled]=\"true\">\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"mb-3 row\" *ngIf=\"showButon\">\r\n                                <div class=\"col-sm-10 m-2\">\r\n                                    <button class=\"btn btn-primary\">{{getNameButon}}</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { SessionUser } from 'src/app/models/login';\r\n\r\n@Component({\r\n  selector: 'app-restablecer-pass',\r\n  templateUrl: './restablecer-pass.component.html',\r\n  styleUrls: ['./restablecer-pass.component.css']\r\n})\r\nexport class RestablecerPassComponent implements OnInit {\r\n  private butonName:string = '';\r\n  private showBtn = false  \r\n  @Input()\r\n  nameComponent = null\r\n  userData: SessionUser;\r\n\r\n  @Input()\r\n  set nameButon(val:string){\r\n    \r\n    this.butonName = val;\r\n    if(this.butonName.length > 0 && this.butonName != null && this.butonName != undefined){\r\n      this.showBtn = true\r\n    }\r\n  }\r\n  public formulario = this._formB.group({\r\n    modificationDate : new FormControl()\r\n  });\r\n\r\n  @Input()\r\n  set user(val:SessionUser){\r\n    console.log(val)\r\n    this.userData = val;\r\n    this.formulario = this.getFormularioGeneral(val);\r\n \r\n  }\r\n\r\n\r\n\r\n  \r\n  constructor(private _formB :FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  getFormularioGeneral(sessionUser?: SessionUser) {\r\n    const dataUsuario = this._formB.group({\r\n      modificationDate :[\r\n        sessionUser == null ? null : sessionUser.passModificationDate,[Validators.nullValidator]\r\n      ]\r\n    });\r\n    return dataUsuario;\r\n  }\r\n\r\n  get getNameButon(){\r\n    return this.butonName\r\n  }\r\n\r\n  get showButon(){\r\n    return this.showBtn;\r\n  }\r\n\r\n}\r\n","<div class=\"accordion mt-4\" id=\"accordionDualistPerfil\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseDualistPerfil\" aria-expanded=\"true\" aria-controls=\"collapseDualistPerfil\">\r\n            {{nameComponent}}\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseDualistPerfil\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionDualistPerfil\">\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-8 mt-2\">\r\n                        <dual-list [sort]=\"keepSorted\" [source]=\"source\" [key]=\"key\" [display]=\"display\" [filter]=\"filter\" [(destination)]=\"confirmed\" height=\"265px\" [format]=\"format\" [disabled]=\"disabled\"></dual-list>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-2 mt-3\" *ngIf=\"statusButton\">\r\n                        <button class=\"btn btn-primary\" (click)=\"guardar()\">{{getBtName}}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';\r\nimport { DualListComponent } from 'angular-dual-listbox';\r\nimport { UserService } from 'src/app/service/user.service';\r\nimport { EditRole, SessionUser } from 'src/app/models/login';\r\nimport { forkJoin, merge, mergeMap } from 'rxjs';\r\nimport { Response } from 'src/app/models/response';\r\nimport { LoginService } from 'src/app/service/login.service';\r\nimport { Role } from '../../../../models/login';\r\nimport { Util, Messages } from 'src/app/utilities/util';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-perfiles',\r\n  templateUrl: './perfiles.component.html',\r\n  styleUrls: ['./perfiles.component.css']\r\n})\r\nexport class PerfilesComponent implements OnInit {\r\n\r\n  @Input()\r\n  idUser = null;\r\n  statusButton: boolean = false;\r\n\r\n  \r\n  @Input()\r\n  set nameBtn(val){\r\n    this.btnName = val\r\n    this.statusButton = val.length > 0 ?? false\r\n  }\r\n\r\n  get getBtName(){\r\n    return this.btnName\r\n  }\r\n\r\n  private btnName;\r\n  tab = 1;\r\n  keepSorted = true;\r\n  key: string;\r\n  display: string;\r\n  filter = true;\r\n  source: Array<any>;\r\n  confirmed: Array<any>;\r\n  userAdd = '';\r\n  disabled = false;\r\n\r\n  sourceLeft = true;\r\n  // format: any = DualListComponent.DEFAULT_FORMAT;\r\n\t\r\n  DEFAULT_FORMAT = { add: 'Agregar', remove: 'Remover', all: 'Seleccionar todos', \r\n  none: 'None', direction: DualListComponent.LTR, draggable: true };\r\n  // format = this.DEFAULT_FORMAT;\r\n  format = { add: 'Agregar', remove: 'Remover', all: 'Seleccionar todos', none: 'Deseleccionar',\r\n  direction: DualListComponent.RTL, draggable: true, locale: 'da' };\r\n  \r\n  private sourceStations: Array<Role> = [];\r\n\r\n  private confirmedStations: Array<Role> = [];\r\n  nameComponent: any;\r\n  userData: SessionUser;\r\n\r\n  @Input()\r\n  set name(val){\r\n    this.nameComponent = val;\r\n    if(this.nameComponent){\r\n      \r\n    }\r\n  }\r\n\r\n  private stations: Array<Role> = [];\r\n\r\n  constructor( private userService:UserService, private loginService: LoginService, private ref: ChangeDetectorRef){}\r\n\r\n\r\n  ngOnInit() {\r\n\r\n    forkJoin(\r\n      this.userService.getById<Response<SessionUser>>(this.idUser),\r\n      this.loginService.getPerfiles<Response<Array<Role>>>()\r\n      ).subscribe( ([user, roles]) =>{\r\n        console.log(user);\r\n        console.log(roles);\r\n        this.sourceStations = roles.data;\r\n        if(user.data.listRoles){\r\n          this.confirmedStations = user.data.listRoles;\r\n        }\r\n        this.useStations();\r\n    })    \r\n    this.userService.getById<Response<SessionUser>>(this.idUser).subscribe((response)=>{\r\n      console.log(response)\r\n      this.userData = response['data'];\r\n    })\r\n  }\r\n\r\n  private useStations() {\r\n    this.key = 'idRole';\r\n    this.display = 'role'; // [ 'idRole', 'role' ];\r\n    this.keepSorted = true;\r\n    this.source = this.sourceStations; // son los roles disponibles\r\n    this.confirmed = this.confirmedStations; // son los que seran removidos\r\n  }\r\n\r\n\r\n\r\n  guardar(){\r\n    let temp:Array<Role> = [...this.source]\r\n    let temp2:Array<Role> = [...this.confirmed];\r\n    let _$ = new EditRole();\r\n    let arr = []\r\n    for(let i = 0; i < temp.length; i ++){\r\n      let boo = false;\r\n      for(let j = 0 ; j < temp2.length; j++){\r\n        if(temp[i] === temp[j]){\r\n          boo = true\r\n          break;\r\n        }\r\n      }\r\n      if(boo == false){\r\n        arr.push(temp[i])\r\n      }\r\n      _$.agregar = temp2;\r\n      _$.remover = arr;\r\n      _$.idUser = this.idUser;\r\n    }\r\n    this.loginService.putPerfiles(_$).subscribe((response)=>{\r\n      let util = new Util();\r\n      let msg = new Messages();\r\n      util.bottomStartOk(msg.MSG_EMERGENTE_TRANSACCION_OK);\r\n    });\r\n  \r\n    console.log(arr);\r\n    \r\n\r\n    \r\n  }\r\n\r\n  filterBtn() {\r\n    return (this.filter ? 'Hide Filter' : 'Show Filter');\r\n  }\r\n\r\n  doDisable() {\r\n    this.disabled = !this.disabled;\r\n  }\r\n\r\n  disableBtn() {\r\n    return (this.disabled ? 'Enable' : 'Disabled');\r\n  }\r\n\r\n  swapDirection() {\r\n    this.sourceLeft = !this.sourceLeft;\r\n    this.format.direction = this.sourceLeft ? DualListComponent.LTR : DualListComponent.RTL;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","<ng-container *ngIf=\"isVisible\">\r\n    <app-usuario [user]=\"userData\" [nameComponent]=\"nameComponent\" [nameButton]=\"nameButton\"></app-usuario>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"this.restablecerPassComp\">\r\n    <app-restablecer-pass [nameComponent]=\"contrasenaComponent\" [nameButon]=\"butonContranseName\" [user]=\"data\"></app-restablecer-pass>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"showPefilesComponent\">\r\n    <app-perfiles [name]=\"name\" [idUser]=\"this.referenceNumber\" [nameBtn]=\"nameBtnPerfil\"></app-perfiles>\r\n</ng-container>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { UserService } from 'src/app/service/user.service';\r\nimport { SessionUser } from 'src/app/models/login';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\nimport { Response } from 'src/app/models/response';\r\nimport { Privilegios } from '../../../../models/login';\r\nimport { isEmpty } from 'rxjs';\r\n@Component({\r\n  selector: 'app-vista-usuario',\r\n  templateUrl: './vista-usuario.component.html',\r\n  styleUrls: ['./vista-usuario.component.css']\r\n})\r\nexport class VistaUsuarioComponent implements OnInit {\r\n  statusGenerales = 1\r\n  id= 0;\r\n  referenceNumber: any;\r\n  userData:SessionUser = null;\r\n  isVisible\r\n  nameComponent: string;\r\n  nameButton: string;\r\n  data:SessionUser=null;\r\n\r\n  contrasenaComponent:string = '';\r\n  butonContranseName:string = '';\r\n  pass;\r\n  restablecerPassComp: Privilegios;\r\n  perfilesComp: Privilegios = null;\r\n  name: string;\r\n  nameBtnPerfil: string='';\r\n  showPefilesComponent: boolean = false;\r\n\r\n  constructor(private router: Router,private route: ActivatedRoute, private userService:UserService,\r\n    private privilegiosService : PrivilegiosServiceService) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.route.params.subscribe(params => {\r\n      this.referenceNumber = params.id\r\n      this.userService.getById<Response<SessionUser>>(params.id).subscribe((response)=>{\r\n        console.log(response)\r\n        this.userData = response['data'];\r\n        this.data = response['data']\r\n        this.userData.userName = response.data.perfil;\r\n      })\r\n    })\r\n\r\n    setTimeout(()=>{\r\n      console.log(this.privilegiosService.getAllPrivilegiosArr())\r\n      let temp =[...this.privilegiosService.getAllPrivilegiosArr()]\r\n      let privilegioGeneral = new Privilegios(this.privilegiosService.searchTree(temp[1], 109))\r\n      this.isVisible = privilegioGeneral.status\r\n      this.nameComponent = privilegioGeneral.etiqueta\r\n      let infoHijos = new Privilegios(this.privilegiosService.searchTree(temp[1], 110))\r\n      this.nameButton = infoHijos.etiqueta     \r\n     \r\n      this.restablecerPassComp = new Privilegios(this.privilegiosService.searchTree(temp[1], 112))  \r\n      this.contrasenaComponent =  new Privilegios(this.privilegiosService.searchTree(temp[1], 112)).etiqueta\r\n      this.butonContranseName = new Privilegios(this.privilegiosService.searchTree(temp[1], 113)).etiqueta\r\n      \r\n      this.perfilesComp =  new Privilegios(this.privilegiosService.searchTree(temp[1], 151))  \r\n      this.showPefilesComponent = Object.keys(this.perfilesComp).length > 0\r\n      console.log(this.perfilesComp);\r\n      \r\n      this.name = this.perfilesComp.etiqueta\r\n      this.nameBtnPerfil = new Privilegios(this.privilegiosService.searchTree(temp[1], 152)).etiqueta\r\n      console.log(this.nameBtnPerfil);\r\n      \r\n    },5000)\r\n  \r\n\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UsuariosListComponent } from './usuarios/usuarios-list/usuarios-list.component';\r\nimport { AuthGuardGuard } from 'src/app/utilities/auth-guard.guard';\r\nimport { RoleBaseAuthorization } from '../../models/login';\r\nimport { PerfilComponent } from '../perfil/perfil.component';\r\nimport { VistaUsuarioComponent } from './usuarios/vista-usuario/vista-usuario.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', redirectTo:'',pathMatch: 'full'\r\n  },{\r\n    path: 'usuarios', component: UsuariosListComponent,\r\n    canActivate:[AuthGuardGuard],\r\n    data:{ \r\n      breadcrumb:'Usuarios', \r\n      page: \"/home/administracion/usuarios\",\r\n      data:[ RoleBaseAuthorization.ADMIN,\r\n        RoleBaseAuthorization.COORDINADOR]\r\n    }\r\n  },{\r\n    path: 'usuario/:id', component: VistaUsuarioComponent,\r\n    canActivate:[AuthGuardGuard],\r\n    data:{ \r\n      breadcrumb:'Usuario', \r\n      page:\"/home/administracion/usuario\",\r\n      roles:[ RoleBaseAuthorization.ADMIN,\r\n        RoleBaseAuthorization.COORDINADOR]\r\n    }\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsuariosRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UsuariosRoutingModule } from './usuarios-routing.module';\r\nimport { UsuariosComponent } from './usuarios.component';\r\nimport { UsuariosListComponent } from './usuarios/usuarios-list/usuarios-list.component';\r\nimport { ShareModule } from '../../share-modules/share-modules.module';\r\nimport { AppRoutingModule } from '../../app-routing.module';\r\nimport { VistaUsuarioComponent } from './usuarios/vista-usuario/vista-usuario.component';\r\nimport { PerfilModule } from '../perfil/perfil.module';\r\nimport { UsuarioComponent } from './usuarios/usuario/usuario.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RestablecerPassComponent } from './usuarios/restablecer-pass/restablecer-pass.component';\r\nimport { PerfilesComponent } from './usuarios/perfiles/perfiles.component';\r\nimport { AngularDualListBoxModule } from 'angular-dual-listbox';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UsuariosComponent,\r\n    UsuariosListComponent,\r\n    VistaUsuarioComponent,\r\n    UsuarioComponent,\r\n    RestablecerPassComponent,\r\n    PerfilesComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    UsuariosRoutingModule,\r\n    ShareModule,\r\n    AppRoutingModule,\r\n    PerfilModule,\r\n    AngularDualListBoxModule  \r\n  ]\r\n})\r\nexport class UsuariosModule { }\r\n"],"x_google_ignoreList":[]}