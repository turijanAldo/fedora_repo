{"version":3,"file":"80.js","mappings":"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","names":["MainPerfilesComponent","constructor","ngOnInit","selectors","i0","ListaPerfilesComponent","TodoItemNode","init","Object","assign","this","TodoItemFlatNode","TREE_DATA","ChecklistDatabase","privilegiosService","loginService","BehaviorSubject","initialize","data","dataChange","value","buildFileTree","obj","level","console","log","todoItemNode","item","descripcion","children","keys","reduce","accumulator","key","Privilegios","node","undefined","concat","insertItem","parent","name","push","next","updateItem","factory","AsignacionPrivilegiosComponent","_database","route","Map","SelectionModel","expandable","_","_nodeData","existingNode","nestedNodeMap","get","flatNode","length","flatNodeMap","set","treeFlattener","MatTreeFlattener","transformer","getLevel","isExpandable","getChildren","treeControl","FlatTreeControl","dataSource","MatTreeFlatDataSource","params","subscribe","referenceNumber","id","getAllPrivilegiosByProfile","result","copiaResult","formatPrivilegios","filter","element","parentprivilegio","dataNodes","temp","find","elem","status","checklistSelection","select","descendantsAllSelected","descendants","getDescendants","every","child","isSelected","descendantsPartiallySelected","some","todoItemSelectionToggle","toggle","deselect","forEach","checkAllParentsSelection","todoLeafItemSelectionToggle","getParentNode","checkRootNodeSelection","nodeSelected","descAllSelected","currentLevel","i","indexOf","currentNode","addNewItem","parentNode","expand","saveNode","itemValue","nestedNode","getAllStatusData","getListData","putUpdateListPrivilegios","response","listPrivilegioStatus","ListPrivilegioStatus","partial","x","selected","privilegio","pS","PrivilegioStatus","partialSelect","list","idProfile","decls","ctx","routes","path","component","VistaPerfilesComponent","router","userService","getById","userData","userName","perfil","setTimeout","getAllPrivilegiosArr","slice","generalesPerfil","searchTree","etiqueta","breadcrumb","PerfilesRoutingModule","RouterModule","PerfilesModule","CommonModule","FormsModule","ReactiveFormsModule","MaterialModule","ShareModule","UserService","UtilHttpService","injector","super","port","PORT_USER","getUserByProfile","profile","URL_MODULE_USER","SERVICE_GET_USER_BY_PROFILE","getUser","profiles","post","sendUserEmail","users","SERVICE_POST_SEND_MAIL","getUserAssigUnAssig","idQuest","idTimeFrame","SERVICE_GET_ASSIGN1","SERVICE_GET_ASSIGN2","upDateData","request","SERVICE_UPDATE_DATA_USER","getHeaders","SERVICE_GET_HEADERS","getDataUsers","put","SERVICE_GET_DATA_USERS","getDataUsersByConf","SERVICE_GET_USERS_BY_CONF","getDataFilter","SERVICE_GET_DATA_FILTER","putResetStatusPass","SERVICE_PUT_RESET_PASS"],"sourceRoot":"webpack:///","sources":["./src/app/modules/perfiles/main-perfiles/main-perfiles.component.ts","./src/app/modules/perfiles/main-perfiles/main-perfiles.component.html","./src/app/modules/perfiles/lista-perfiles/lista-perfiles.component.ts","./src/app/modules/perfiles/lista-perfiles/lista-perfiles.component.html","./src/app/modules/perfiles/asignacion-privilegios/asignacion-privilegios.component.html","./src/app/modules/perfiles/asignacion-privilegios/asignacion-privilegios.component.ts","./src/app/modules/perfiles/perfiles-routing.module.ts","./src/app/modules/perfiles/vista-perfiles/vista-perfiles.component.ts","./src/app/modules/perfiles/vista-perfiles/vista-perfiles.component.html","./src/app/modules/perfiles/perfiles.module.ts","./src/app/service/user.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-perfiles',\r\n  templateUrl: './main-perfiles.component.html',\r\n  styleUrls: ['./main-perfiles.component.css']\r\n})\r\nexport class MainPerfilesComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"panel\">\r\n    <div>\r\n        <main>\r\n            <router-outlet></router-outlet>\r\n        </main>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-lista-perfiles',\r\n  templateUrl: './lista-perfiles.component.html',\r\n  styleUrls: ['./lista-perfiles.component.css']\r\n})\r\nexport class ListaPerfilesComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>lista-perfiles works!</p>\r\n<app-table-component [setDataForPerfiles]=\"'true'\" [paginado]=\"10\">\r\n</app-table-component>","<div class=\"accordion mt-4\" id=\"accordionDualist\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseDualist\" aria-expanded=\"true\" aria-controls=\"collapseDualist\">\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseDualist\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionDualist\">\r\n            <div class=\"container\">\r\n                <div class=\"row mt-3\">\r\n                    <div class=\"col-md-12\">\r\n                        <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n                            <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\r\n                                <button mat-icon-button disabled></button>\r\n                                <mat-checkbox class=\"checklist-leaf-node\" [checked]=\"checklistSelection.isSelected(node)\" (change)=\"todoLeafItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n                            </mat-tree-node>\r\n                            <div>\r\n                                <mat-tree-node *matTreeNodeDef=\"let node; when: hasNoContent\" matTreeNodePadding>\r\n                                    <button mat-icon-button disabled></button>\r\n                                    <mat-form-field appearance=\"fill\">\r\n                                        <mat-label>New item...</mat-label>\r\n                                        <input matInput #itemValue placeholder=\"Ex. Lettuce\">\r\n                                    </mat-form-field>\r\n                                    <button mat-button (click)=\"saveNode(node, itemValue.value)\">Save</button>\r\n                                </mat-tree-node>\r\n                            </div>\r\n                            <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\r\n                                <button mat-icon-button matTreeNodeToggle [attr.aria-label]=\"'Toggle ' + node.item\">\r\n                                <mat-icon class=\"mat-icon-rtl-mirror\">\r\n                                  {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\r\n                                </mat-icon>\r\n                              </button>\r\n                                <mat-checkbox [checked]=\"descendantsAllSelected(node)\" [indeterminate]=\"descendantsPartiallySelected(node)\" (change)=\"todoItemSelectionToggle(node)\">{{node.item}}</mat-checkbox>\r\n                                <!-- <button mat-icon-button (click)=\"addNewItem(node)\"><mat-icon>add</mat-icon></button> -->\r\n                            </mat-tree-node>\r\n                        </mat-tree>\r\n                    </div>\r\n\r\n                    <div class=\"col-md-12\">\r\n                        <button class=\"btn btn-primary\" (click)=\"getAllStatusData()\">Guardar</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { FlatTreeControl } from '@angular/cdk/tree';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  MatTreeFlatDataSource,\r\n  MatTreeFlattener,\r\n} from '@angular/material/tree';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { Privilegios } from '../../../models/login';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\n\r\nimport { Response } from 'src/app/models/response';\r\nimport { LoginService } from 'src/app/service/login.service';\r\nimport { Util } from 'src/app/utilities/util';\r\nimport { ListPrivilegioStatus, PrivilegioStatus } from 'src/app/models/privilegiosConf';\r\nimport { ActivatedRoute } from '@angular/router';\r\n/**\r\n * Node for to-do item\r\n */\r\n export class TodoItemNode {\r\n  children: TodoItemNode[];\r\n  item: string;\r\n  constructor(init?: Partial<TodoItemNode>) {\r\n    Object.assign(this, init);\r\n}\r\n}\r\n\r\n/** Flat to-do item node with expandable and level information */\r\nexport class TodoItemFlatNode {\r\n  item: string;\r\n  level: number;\r\n  expandable: boolean;\r\n}\r\n\r\n/**\r\n * The Json object for to-do list data.\r\n */\r\nlet TREE_DATA:Privilegios[] = []\r\n\r\n/**\r\n * Checklist database, it can build a tree structured Json object.\r\n * Each node in Json object represents a to-do item or a category.\r\n * If a node is a category, it has children items and new items can be added under the category.\r\n */\r\n@Injectable()\r\nexport class ChecklistDatabase {\r\n  dataChange = new BehaviorSubject<Privilegios[]>([]);\r\n\r\n  get data(): Privilegios[] {\r\n    return this.dataChange.value;\r\n  }\r\n\r\n  constructor(    private privilegiosService: PrivilegiosServiceService,\r\n    private loginService: LoginService) {\r\n    this.initialize();\r\n  }\r\n\r\n  initialize() {\r\n\r\n    // Build the tree nodes from Json object. The result is a list of `Privilegios` with nested\r\n    //     file node as children.\r\n    \r\n    // const data = this.buildFileTree(TREE_DATA, 0);\r\n\r\n    // // Notify the change.\r\n    // this.dataChange.next(data);\r\n  }\r\n\r\n  /**\r\n   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.\r\n   * The return value is the list of `Privilegios`.\r\n   */\r\n  buildFileTree(obj: {[key: string]: any}, level: number): Privilegios[] {\r\n    console.log(obj);\r\n    \r\n    let todoItemNode = new TodoItemNode();\r\n    todoItemNode.item = obj.descripcion;\r\n    todoItemNode.children = obj.children;\r\n    // delete obj.idprivilegio;\r\n    // delete obj.link;\r\n    // delete obj.parentprivilegio;\r\n    // delete obj.status;\r\n    // delete obj.tipo;\r\n    // delete obj.etiqueta;\r\n    // if(obj.children == undefined){\r\n    //   delete obj.children;\r\n    // }\r\n    console.log('--------------->');\r\n    console.log(todoItemNode);\r\n    \r\n    console.log(obj);\r\n    \r\n    return Object.keys(obj).reduce<Privilegios[]>((accumulator, key) => {\r\n      const value = Privilegios[key];\r\n      const node = new Privilegios();\r\n      node.descripcion = key;\r\n      if(obj.children !== undefined){\r\n        node.children = obj.children;\r\n      }\r\n      if (value != null) {\r\n        if (typeof value === 'object') {\r\n          node.children = this.buildFileTree(value, level + 1);\r\n        } else {\r\n          node.descripcion = value;\r\n        }\r\n      }\r\n\r\n      return accumulator.concat(node);\r\n    }, []);\r\n  }\r\n\r\n  /** Add an item to to-do list */\r\n  insertItem(parent: Privilegios, name: string) {\r\n    if (parent.children) {\r\n      parent.children.push({descripcion: name} as Privilegios);\r\n      this.dataChange.next(this.data);\r\n    }\r\n  }\r\n\r\n  updateItem(node: Privilegios, name: string) {\r\n    node.descripcion = name;\r\n    this.dataChange.next(this.data);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Tree with checkboxes\r\n */\r\n@Component({\r\n  selector: 'app-asignacion-privilegios',\r\n  templateUrl: './asignacion-privilegios.component.html',\r\n  styleUrls: ['./asignacion-privilegios.component.css'],\r\n  providers: [ChecklistDatabase],\r\n})\r\nexport class AsignacionPrivilegiosComponent implements OnInit {\r\n  /** Map from flat node to nested node. This helps us finding the nested node to be modified */\r\n  flatNodeMap = new Map<TodoItemFlatNode, Privilegios>();\r\n\r\n  /** Map from nested node to flattened node. This helps us to keep the same object for selection */\r\n  nestedNodeMap = new Map<Privilegios, TodoItemFlatNode>();\r\n\r\n  /** A selected parent node to be inserted */\r\n  selectedParent: TodoItemFlatNode | null = null;\r\n\r\n  /** The new item's name */\r\n  newItemName = '';\r\n\r\n  treeControl: FlatTreeControl<TodoItemFlatNode>;\r\n\r\n  treeFlattener: MatTreeFlattener<Privilegios, TodoItemFlatNode>;\r\n\r\n  dataSource: MatTreeFlatDataSource<Privilegios, TodoItemFlatNode>;\r\n\r\n  /** The selection for checklist */\r\n  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);\r\n  referenceNumber: any;\r\n  copiaResult: Privilegios[];\r\n\r\n  constructor(private _database: ChecklistDatabase ,  private loginService: LoginService, private privilegiosService: PrivilegiosServiceService,\r\n    private route: ActivatedRoute) {\r\n    this.treeFlattener = new MatTreeFlattener(\r\n      this.transformer,\r\n      this.getLevel,\r\n      this.isExpandable,\r\n      this.getChildren,\r\n    );\r\n    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);\r\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n    this.dataSource.data = TREE_DATA;\r\n    // _database.dataChange.subscribe(data => {\r\n    //   this.dataSource.data = data;\r\n    // });\r\n  }\r\n  ngOnInit(): void {\r\n    this.route.params.subscribe(params => {\r\n      this.referenceNumber = params.id\r\n      this.loginService\r\n      .getAllPrivilegiosByProfile<Response<Array<Privilegios>>>(this.referenceNumber)\r\n      .subscribe((result) => {\r\n        this.copiaResult = [...result['data']];      \r\n        let format: Privilegios[] = this.privilegiosService.formatPrivilegios(\r\n          result['data']\r\n        );\r\n        let _arrFormat = result.data.filter((element)=>{\r\n          return element.parentprivilegio == 0;\r\n        })\r\n        TREE_DATA = _arrFormat;\r\n        this.dataSource.data = TREE_DATA;\r\n        for(let item of this.treeControl.dataNodes) {\r\n          let temp = this.copiaResult.find((elem)=>{return elem.descripcion == item.item})          \r\n            if(temp.descripcion == item.item && temp.status == 1){\r\n              this.checklistSelection.select(item);\r\n            } \r\n        }\r\n      });\r\n    })\r\n\r\n  }\r\n\r\n  getLevel = (node: TodoItemFlatNode) => node.level;\r\n\r\n  isExpandable = (node: TodoItemFlatNode) => node.expandable;\r\n\r\n  getChildren = (node: Privilegios): Privilegios[] => node.children;\r\n\r\n  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;\r\n\r\n  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';\r\n\r\n  /**\r\n   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.\r\n   */\r\n  transformer = (node: Privilegios, level: number) => {\r\n    const existingNode = this.nestedNodeMap.get(node);\r\n    const flatNode =\r\n      existingNode && existingNode.item === node.descripcion ? existingNode : new TodoItemFlatNode();\r\n    flatNode.item = node.descripcion;\r\n    flatNode.level = level;\r\n    flatNode.expandable = !!node.children?.length;\r\n    this.flatNodeMap.set(flatNode, node);\r\n    this.nestedNodeMap.set(node, flatNode);\r\n    return flatNode;\r\n  };\r\n\r\n  transformer1 = (node: Privilegios, level: number) => {\r\n    return {\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name: node.descripcion,\r\n      level: level,\r\n    };\r\n  }\r\n\r\n  /** Whether all the descendants of the node are selected. */\r\n  descendantsAllSelected(node: TodoItemFlatNode): boolean {\r\n    \r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    return descAllSelected;\r\n  }\r\n\r\n  /** Whether part of the descendants are selected */\r\n  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const result = descendants.some(child => this.checklistSelection.isSelected(child));\r\n    return result && !this.descendantsAllSelected(node);\r\n  }\r\n\r\n  /** Toggle the to-do item selection. Select/deselect all the descendants node */\r\n  todoItemSelectionToggle(node: TodoItemFlatNode): void {\r\n    this.checklistSelection.toggle(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    this.checklistSelection.isSelected(node)\r\n      ? this.checklistSelection.select(...descendants)\r\n      : this.checklistSelection.deselect(...descendants);\r\n\r\n    // Force update for the parent\r\n    descendants.forEach(child => this.checklistSelection.isSelected(child));\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */\r\n  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {\r\n     console.log(\"todoLeafItemSelectionToggle\");\r\n    // console.log(node);\r\n    \r\n    this.checklistSelection.toggle(node);\r\n    this.checkAllParentsSelection(node);\r\n  }\r\n\r\n  /* Checks all the parents when a leaf node is selected/unselected */\r\n  checkAllParentsSelection(node: TodoItemFlatNode): void {\r\n    let parent: TodoItemFlatNode | null = this.getParentNode(node);\r\n    while (parent) {\r\n      this.checkRootNodeSelection(parent);\r\n      parent = this.getParentNode(parent);\r\n    }\r\n  }\r\n\r\n  /** Check root node checked state and change it accordingly */\r\n  checkRootNodeSelection(node: TodoItemFlatNode): void {\r\n    const nodeSelected = this.checklistSelection.isSelected(node);\r\n    const descendants = this.treeControl.getDescendants(node);\r\n    const descAllSelected =\r\n      descendants.length > 0 &&\r\n      descendants.every(child => {\r\n        return this.checklistSelection.isSelected(child);\r\n      });\r\n    if (nodeSelected && !descAllSelected) {\r\n      this.checklistSelection.deselect(node);\r\n    } else if (!nodeSelected && descAllSelected) {\r\n      this.checklistSelection.select(node);\r\n    }\r\n  }\r\n\r\n  /* Get the parent node of a node */\r\n  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {\r\n    const currentLevel = this.getLevel(node);\r\n    if (currentLevel < 1) {\r\n      return null;\r\n    }\r\n    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      const currentNode = this.treeControl.dataNodes[i];\r\n      if (this.getLevel(currentNode) < currentLevel) {\r\n        return currentNode;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Select the category so we can insert the new item. */\r\n  addNewItem(node: TodoItemFlatNode) {\r\n    const parentNode = this.flatNodeMap.get(node);\r\n    this._database.insertItem(parentNode!, '');\r\n    this.treeControl.expand(node);\r\n  }\r\n\r\n  /** Save the node to database */\r\n  saveNode(node: TodoItemFlatNode, itemValue: string) {\r\n    const nestedNode = this.flatNodeMap.get(node);\r\n    this._database.updateItem(nestedNode!, itemValue);\r\n  }\r\n\r\n  getAllStatusData(){\r\n    console.log(this.getListData());\r\n    this.loginService.putUpdateListPrivilegios(this.getListData()).subscribe((response)=>{\r\n      console.log(response);\r\n    })\r\n    \r\n  }\r\n\r\n  getListData():ListPrivilegioStatus{\r\n    let listPrivilegioStatus = new ListPrivilegioStatus();\r\n\r\n    for(let item of this.treeControl.dataNodes) {\r\n      // console.log(item);\r\n\r\n      // let pS = new PrivilegioStatus();\r\n      // pS.name = item.item; \r\n      // pS.status = this.checklistSelection.isSelected(item)\r\n      // listPrivilegioStatus.list.push(pS);\r\n    }\r\n    let partialSelection = []; \r\n    const partial=this.treeControl.dataNodes\r\n    .filter(x=>this.descendantsPartiallySelected(x))\r\n\r\n  console.log('============',this.checklistSelection.selected, partial)\r\n    // for(let item of this.treeControl.dataNodes) {\r\n    //   this.checklistSelection.toggle(item);\r\n    //   const descendants = this.treeControl.getDescendants(item);\r\n    //   this.checklistSelection.isSelected(item)\r\n    //     ? this.checklistSelection.select(...descendants)\r\n    //     : this.checklistSelection.deselect(...descendants);\r\n    //   partialSelection = this.treeControl.dataNodes.filter(x => \r\n    //                     this.descendantsPartiallySelected(x));\r\n    // }\r\n    console.log('Partial......', partialSelection);\r\n          \r\n\r\n    \r\n    this.copiaResult.forEach((privilegio)=>{\r\n      let pS = new PrivilegioStatus();\r\n      let isSelect = this.checklistSelection.selected.find((selected)=>{ return selected.item == privilegio.descripcion})\r\n      if(isSelect){\r\n        pS.name = privilegio.descripcion\r\n        pS.status = true\r\n        listPrivilegioStatus.list.push(pS);\r\n      }else{\r\n        let isPartial = partial.find((partialSelect)=>{ return partialSelect.item == privilegio.descripcion})\r\n        if(isPartial){\r\n          pS.name = privilegio.descripcion\r\n          pS.status = true\r\n          listPrivilegioStatus.list.push(pS);\r\n        }else{\r\n          pS.name = privilegio.descripcion\r\n          pS.status = false\r\n          listPrivilegioStatus.list.push(pS);\r\n        }\r\n      }\r\n      \r\n    })\r\n    listPrivilegioStatus.idProfile = this.referenceNumber;\r\n    \r\n    return listPrivilegioStatus\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MainPerfilesComponent } from './main-perfiles/main-perfiles.component';\r\nimport { ListaPerfilesComponent } from './lista-perfiles/lista-perfiles.component';\r\nimport { VistaPerfilesComponent } from './vista-perfiles/vista-perfiles.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component : MainPerfilesComponent,\r\n    children:[\r\n      {path:'perfil/:id', component: VistaPerfilesComponent, data:{\r\n        breadcrumb:\"Perfil\",\r\n        privilegio:\"150\"\r\n      }},\r\n      {path:'', component: ListaPerfilesComponent}\r\n    ],data:{\r\n      breadcrumb:\"Perfil\",\r\n      privilegio:\"150\"\r\n    },\r\n\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PerfilesRoutingModule { }\r\n// const routes: Routes = [\r\n//   {\r\n//     path: 'listado', component : MainPerfilesComponent,\r\n//     children:[\r\n//       {path:'perfil/:id', component: VistaPerfilesComponent, data:{\r\n//         breadcrumb:\"Perfiles\"\r\n//       }},\r\n//       {path:'', component: ListaPerfilesComponent}\r\n//     ],\r\n//     data:{\r\n//       breadcrumb:'Usuarios', \r\n//       page:\"/home/administracion/usuario\",\r\n//       roles:[ \r\n//         RoleBaseAuthorization.ADMIN,\r\n//         RoleBaseAuthorization.COORDINADOR]\r\n//     }\r\n//   },\r\n//   {path:'' , redirectTo:\"/administracion\",pathMatch:\"full\"}\r\n// ];","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { Privilegios, SessionUser } from 'src/app/models/login';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\nimport { UserService } from 'src/app/service/user.service';\r\nimport { Response } from 'src/app/models/response';\r\n\r\n@Component({\r\n  selector: 'app-vista-perfiles',\r\n  templateUrl: './vista-perfiles.component.html',\r\n  styleUrls: ['./vista-perfiles.component.css']\r\n})\r\nexport class VistaPerfilesComponent implements OnInit {\r\n  referenceNumber: any;\r\n  userData:SessionUser = null;\r\n  isVisible\r\n  nameComponent: string;\r\n  nameButton: string;\r\n  data:SessionUser=null;\r\n\r\n  constructor(private router: Router,private route: ActivatedRoute, private userService:UserService,\r\n    private privilegiosService : PrivilegiosServiceService) { }\r\n\r\n    ngOnInit(): void {\r\n      this.route.params.subscribe(params => {\r\n        this.referenceNumber = params.id\r\n        this.userService.getById<Response<SessionUser>>(params.id).subscribe((response)=>{\r\n          console.log(response)\r\n          this.userData = response['data'];\r\n          this.data = response['data']\r\n          this.userData.userName = response.data.perfil;\r\n        })\r\n      })\r\n  \r\n      setTimeout(()=>{\r\n        console.log('-----------------------------------------');\r\n        \r\n        console.log(this.privilegiosService.getAllPrivilegiosArr())\r\n        let temp = this.privilegiosService.getAllPrivilegiosArr().slice()\r\n        let privilegioGeneral = new Privilegios(this.privilegiosService.searchTree(temp[1], 109))\r\n        let generalesPerfil = new Privilegios(this.privilegiosService.searchTree(temp[1], 270)).etiqueta\r\n        console.log(generalesPerfil);\r\n        \r\n      },5000)\r\n    }\r\n\r\n}\r\n","<!-- <ng-container>\r\n    <app-generales-perfiles [nameComponent]=\"'Generales'\"></app-generales-perfiles>\r\n</ng-container> -->\r\n\r\n<ng-container>\r\n    <app-asignacion-privilegios></app-asignacion-privilegios>\r\n</ng-container>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PerfilesRoutingModule } from './perfiles-routing.module';\r\nimport { MainPerfilesComponent } from './main-perfiles/main-perfiles.component';\r\n\r\nimport { VistaPerfilesComponent } from './vista-perfiles/vista-perfiles.component';\r\nimport { ListaPerfilesComponent } from './lista-perfiles/lista-perfiles.component';\r\nimport { MaterialModule } from '../material-module/material-module.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { GeneralesPerfilesComponent } from './generales-perfiles/generales-perfiles.component';\r\nimport { AsignacionPrivilegiosComponent } from './asignacion-privilegios/asignacion-privilegios.component';\r\nimport { ShareModule } from 'src/app/share-modules/share-modules.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MainPerfilesComponent,\r\n    VistaPerfilesComponent,\r\n    ListaPerfilesComponent,\r\n    GeneralesPerfilesComponent,\r\n    AsignacionPrivilegiosComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PerfilesRoutingModule,\r\n    MaterialModule,ShareModule\r\n  ]\r\n})\r\nexport class PerfilesModule { }\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { UtilHttpService } from '../utilities/util-http.service';\r\nimport { Observable } from 'rxjs';\r\nimport { ViewUser } from '../models/viewUser';\r\nimport { ListByProfiles } from '../models/viewUser';\r\nimport { AssignedUnassignedList } from '../models/AssignedUnassignedList';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService extends UtilHttpService {\r\n\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n    this.port = this.PORT_USER;\r\n  }\r\n\r\n  getUserByProfile<Response>(profile: String): Observable<Response> {\r\n    //  console.log(this.URL_MODULE_USER + this.SERVICE_GET_USER_BY_PROFILE +\"/\"+ profile);\r\n    return super.get(this.URL_MODULE_USER + this.SERVICE_GET_USER_BY_PROFILE + \"/\" + profile);\r\n  }\r\n\r\n  getUser<Response>(profiles: ListByProfiles): Observable<Response> {\r\n    return super.post(this.URL_MODULE_USER + this.SERVICE_GET_USER_BY_PROFILE, profiles);\r\n\r\n  }\r\n\r\n  sendUserEmail<Response>(users: ViewUser[]): Observable<Response> {\r\n    return super.post(this.URL_MODULE_USER + this.SERVICE_POST_SEND_MAIL, users);\r\n  }\r\n\r\n  getUserAssigUnAssig<Response>( idQuest: number, idTimeFrame: number): Observable<Response> {\r\n    return super.get(this.URL_MODULE_USER + this.SERVICE_GET_ASSIGN1 + '/' + idQuest +\r\n      this.SERVICE_GET_ASSIGN2 + '/' + idTimeFrame  );\r\n  }\r\n\r\n  upDateData<Response>(request:any){\r\n    return super.post(this.URL_MODULE_USER + this.SERVICE_UPDATE_DATA_USER, request)\r\n  }\r\n  getById<Response>(request:number){\r\n    return super.get(this.URL_MODULE_USER+'/'+request)\r\n  }\r\n\r\n  getHeaders<Response>(){\r\n    return super.get(this.URL_MODULE_USER+this.SERVICE_GET_HEADERS)\r\n  }\r\n  \r\n  getDataUsers<Response>(request?:number){\r\n    return super.put(this.URL_MODULE_USER+this.SERVICE_GET_DATA_USERS,null);\r\n  }\r\n  getDataUsersByConf<Response>(request?:number){\r\n    return super.put(this.URL_MODULE_USER+this.SERVICE_GET_USERS_BY_CONF+'/'+request,null);\r\n  }\r\n  \r\n  getDataFilter<response>(request:any){\r\n    return super.put(this.URL_MODULE_USER+this.SERVICE_GET_DATA_FILTER,request);\r\n  }\r\n  \r\n  putResetStatusPass(id:number, status:boolean){\r\n    return super.put(this.URL_MODULE_USER + this.SERVICE_PUT_RESET_PASS + '/'+id+'/'+status,null);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}