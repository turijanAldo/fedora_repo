{"version":3,"file":"907.js","mappings":"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","names":["i0","MiPerfilComponent","constructor","_formB","userService","privilegiosService","this","group","idUser","FormControl","userName","name","firstLastName","secondLastName","email","ngOnInit","getUser","JSON","parse","sessionStorage","getItem","getById","user","subscribe","response","console","log","SessionUser","data","formularioGeneral","getFormularioGeneral","getPrivilegios","arrPrivilegios","setPrivilegios","forEach","record","idprivilegio","nameButtom","etiqueta","statusButton","status","nameComponent","sessionUser","Validators","getFormControl","controlName","controls","guardar","value","valid","util","Util","msg","Messages","upDateData","bottomStartOk","MSG_EMERGENTE_TRANSACCION_OK","error","bottomEndError","selectors","messages","MessagesError","messagesServer","CambioPassComponent","auth","loginService","httpClient","actualPassword","newPassword","confirmPassword","descripcion","includes","statusPass","f","passwordForm","isValid","validate","get","submit","setValue","setErrors","incorrect","loading","request","changePasswordRequest","currentUserValue","currentSession","btoa","lastLoginDate","executeChangePassword","ip","doChange","environment","res","errorToast","_500_GENERAL_ERROR","changePassword","refreshToken","token","reset","_ERROR_LOGIN_CHANGE_CURRENT_PASS_INCORRECT","routes","path","redirectTo","pathMatch","component","GeneralesComponent","statusGenerales","canActivate","AuthGuardGuard","breadcrumb","page","RoleBaseAuthorization","PerfilRoutingModule","RouterModule","PerfilModule","CommonModule","FormsModule","ReactiveFormsModule","UserService","UtilHttpService","injector","super","port","PORT_USER","getUserByProfile","profile","URL_MODULE_USER","SERVICE_GET_USER_BY_PROFILE","profiles","post","sendUserEmail","users","SERVICE_POST_SEND_MAIL","getUserAssigUnAssig","idQuest","idTimeFrame","SERVICE_GET_ASSIGN1","SERVICE_GET_ASSIGN2","SERVICE_UPDATE_DATA_USER","getHeaders","SERVICE_GET_HEADERS","getDataUsers","put","SERVICE_GET_DATA_USERS","getDataUsersByConf","SERVICE_GET_USERS_BY_CONF","getDataFilter","SERVICE_GET_DATA_FILTER","putResetStatusPass","id","SERVICE_PUT_RESET_PASS","factory"],"sourceRoot":"webpack:///","sources":["./src/app/modules/perfil/components/mi-perfil/mi-perfil.component.html","./src/app/modules/perfil/components/mi-perfil/mi-perfil.component.ts","./src/app/modules/perfil/components/cambio-pass/cambio-pass.component.html","./src/app/modules/perfil/components/cambio-pass/cambio-pass.component.ts","./src/app/modules/perfil/components/generales/generales.component.html","./src/app/modules/perfil/perfil-routing.module.ts","./src/app/modules/perfil/components/generales/generales.component.ts","./src/app/modules/perfil/perfil.module.ts","./src/app/service/user.service.ts"],"sourcesContent":["<div class=\"accordion\" id=\"accordionExample\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                {{nameComponent}}\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <form [formGroup]=\"formularioGeneral\">\r\n                <div class=\"accordion-body\">\r\n                    <div class=\"panel\">\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Usuario</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"Usuario\" formControlName=\"userName\" [ngClass]=\"{ 'is-invalid': (getFormControl('userName').touched || getFormControl('userName').dirty) && getFormControl('userName').invalid}\" [attr.disabled]=\"true\">\r\n                            </div>\r\n\r\n                            <div *ngIf=\"(getFormControl('userName').touched || getFormControl('userName').dirty) && getFormControl('userName').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Nombre</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"Nombre\" formControlName=\"name\" [ngClass]=\"{ 'is-invalid': (getFormControl('name').touched ||  getFormControl('name').dirty) && getFormControl('name').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('name').touched ||  getFormControl('name').dirty) && getFormControl('name').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Apellido paterno</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"appaterno\" formControlName=\"firstLastName\" [ngClass]=\"{ 'is-invalid': (getFormControl('firstLastName').touched || getFormControl('firstLastName').dirty) && getFormControl('firstLastName').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('firstLastName').touched || getFormControl('firstLastName').dirty) && getFormControl('firstLastName').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Apellido materno</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"text\" class=\"form-control\" id=\"appaterno\" formControlName=\"secondLastName\" [ngClass]=\"{ 'is-invalid': (getFormControl('secondLastName').touched || getFormControl('secondLastName').dirty) && getFormControl('secondLastName').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('secondLastName').touched || getFormControl('secondLastName').dirty) && getFormControl('secondLastName').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Correo</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"email\" class=\"form-control\" id=\"correo\" formControlName=\"email\" [ngClass]=\"{ 'is-invalid': (getFormControl('email').touched ||  getFormControl('email').dirty) && getFormControl('email').invalid}\">\r\n                            </div>\r\n                            <div *ngIf=\"(getFormControl('email').touched ||  getFormControl('email').dirty) && getFormControl('email').invalid\" class=\"text-danger\">\r\n                                <div>\r\n                                    <small>*Campo requerido</small>\r\n                                </div>\r\n                                <div>\r\n                                    <small>*Formato no valido.</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\" *ngIf=\"statusButton != 185\">\r\n                            <div class=\"col-sm-10 m-2\">\r\n                                <button class=\"btn btn-primary\" (click)=\"guardar()\">{{nameButtom}}</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { SessionUser, Privilegios } from 'src/app/models/login';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\nimport { UserService } from 'src/app/service/user.service';\r\nimport { Messages, MessagesError, Util } from 'src/app/utilities/util';\r\n\r\n@Component({\r\n  selector: 'app-mi-perfil',\r\n  templateUrl: './mi-perfil.component.html',\r\n  styleUrls: ['./mi-perfil.component.css'],\r\n})\r\nexport class MiPerfilComponent implements OnInit {\r\n  disabledUserName=true;\r\n  arrPrivilegios :Array<Privilegios>;\r\n  nameButtom:string;\r\n  statusButton=0\r\n  statusPass=0\r\n  nameComponent: string;\r\n  constructor(private _formB: FormBuilder,private userService:UserService,private privilegiosService: PrivilegiosServiceService) {}\r\n\r\n  public formularioGeneral = this._formB.group({\r\n    idUser: new FormControl(),\r\n    userName: new FormControl(),\r\n    name: new FormControl(),\r\n    firstLastName: new FormControl(),\r\n    secondLastName: new FormControl(),\r\n    email: new FormControl()\r\n  });\r\n\r\n  ngOnInit(): void {\r\n\r\n    let getUser = JSON.parse(sessionStorage.getItem('user'))\r\n    this.userService.getById(getUser.user.idUser).subscribe((response)=>{\r\n      console.log(response)\r\n      let user = new SessionUser(response.data);\r\n      console.log(response.data)\r\n      user.userName = getUser.user.userName;\r\n      this.formularioGeneral = this.getFormularioGeneral(user)\r\n    })\r\n    this.privilegiosService.getPrivilegios().subscribe((data)=>{\r\n      this.arrPrivilegios = data;\r\n    });\r\n    this.privilegiosService.setPrivilegios();\r\n    this.arrPrivilegios.forEach((record)=>{\r\n      if(record.idprivilegio == 5){\r\n        this.nameButtom = record.etiqueta\r\n        this.statusButton = record.status\r\n      }\r\n      if(record.idprivilegio == 4){\r\n        this.nameComponent = record.etiqueta\r\n      }\r\n    })\r\n  }\r\n\r\n  getFormularioGeneral(sessionUser?: SessionUser) {\r\n    const dataUsuario = this._formB.group({\r\n      idUser: [sessionUser == null ? null : sessionUser.idUser, [Validators.nullValidator]],\r\n      userName: [sessionUser == null ? null : sessionUser.userName, [Validators.required]],\r\n      name: [sessionUser == null ? null : sessionUser.name, [Validators.required]],\r\n      firstLastName: [\r\n        sessionUser == null ? null : sessionUser.firstLastName,[Validators.required]\r\n      ],\r\n      secondLastName: [\r\n        sessionUser == null ? null : sessionUser.secondLastName,[Validators.nullValidator]\r\n      ],\r\n      email: [\r\n        sessionUser == null ? null : sessionUser.email,[Validators.email, Validators.required]\r\n      ]\r\n    });\r\n    return dataUsuario;\r\n  }\r\n\r\n  public getFormControl(controlName: string): AbstractControl {\r\n    return this.formularioGeneral.controls[controlName];\r\n  }\r\n\r\n\r\n  public guardar(){\r\n    console.log(this.formularioGeneral.value)\r\n    if(this.formularioGeneral.valid){\r\n      let util = new Util();\r\n      let msg = new Messages();\r\n      this.userService.upDateData(this.formularioGeneral.value).subscribe((response)=>{\r\n        let data = response['data']\r\n        this.getFormularioGeneral(data)\r\n        this.ngOnInit();\r\n        util.bottomStartOk(msg.MSG_EMERGENTE_TRANSACCION_OK)\r\n\r\n      },error =>{\r\n        util.bottomEndError(\"error\")\r\n      }\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","<div class=\"accordion\" id=\"accordionPass\">\r\n    <div class=\"accordion-item\">\r\n        <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"true\" aria-controls=\"collapseTwo\">\r\n                {{nameComponent}}\r\n            </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionPass\">\r\n            <form [formGroup]=\"passwordForm\">\r\n                <div class=\"accordion-body\">\r\n                    <div class=\"panel\">\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Actual</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"password\" class=\"form-control\" id=\"Usuario\" formControlName=\"actualPassword\" [ngClass]=\"{ 'is-invalid': f.actualPassword.invalid && (f.actualPassword.dirty || f.actualPassword.touched)}\">\r\n                                <div *ngIf=\"f.actualPassword.invalid && (f.actualPassword.dirty || f.actualPassword.touched)\" class=\"text-danger\">\r\n                                    <div *ngIf=\"f.actualPassword.errors.incorrect\">\r\n                                        <small> No Valido {{f.actualPassword.errors.incorrect | json}}</small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"inputPassword\" class=\"col-sm-2 col-form-label\">Nuevo</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"password\" class=\"form-control\" id=\"Nombre\" formControlName=\"newPassword\" [ngClass]=\"{ 'is-invalid': f.newPassword.invalid && (f.newPassword.dirty || f.newPassword.touched)}\">\r\n                                <div *ngIf=\"f.newPassword.invalid && (f.newPassword.dirty || f.newPassword.touched)\" class=\"text-danger\">\r\n                                    <div *ngIf=\"f.newPassword.errors.incorrect\">\r\n                                        <small> No Valido {{f.newPassword.errors.incorrect | json}}</small>\r\n                                    </div>\r\n                                    <div *ngIf=\"f.newPassword.errors\">\r\n                                        <small>El maximo de caracteres es 8. </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\">\r\n                            <label for=\"staticEmail\" class=\"col-sm-2 col-form-label\">Confirmar</label>\r\n                            <div class=\"col-sm-10\">\r\n                                <input type=\"password\" class=\"form-control\" id=\"appaterno\" formControlName=\"confirmPassword\" [ngClass]=\"{ 'is-invalid': f.confirmPassword.invalid && (f.confirmPassword.dirty || f.confirmPassword.touched)}\">\r\n                                <div *ngIf=\"f.confirmPassword.invalid && (f.confirmPassword.dirty || f.confirmPassword.touched)\" class=\"text-danger\">\r\n                                    <div *ngIf=\"f.confirmPassword.errors.incorrect\">\r\n                                        <small> No Valido {{f.confirmPassword.errors.incorrect | json}}</small>\r\n                                    </div>\r\n                                    <div *ngIf=\"f.confirmPassword.errors.pattern\">\r\n                                        <small>El formato de la contraseña debe contener al menos un carácter\r\n                                            especial,un número y una máyuscula. </small>\r\n                                    </div>\r\n                                    <div *ngIf=\"f.confirmPassword.errors\">\r\n                                        <small>El maximo de caracteres es 8. </small>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"mb-3 row\" *ngIf=\"statusPass != 185\">\r\n                            <div class=\"col-sm-10 m-2\">\r\n                                <button class=\"btn btn-primary\" [disabled]=\"isValid()\" (click)=\"validate()\">{{nameButtom}}</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </form>\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\r\n\r\nimport { AuthenticationService } from 'src/app/service/authentication.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { changePasswordRequest, LoginResponse } from '../../../../models/login';\r\nimport { LoginService } from 'src/app/service/login.service';\r\nimport { Util, MessagesError, Messages } from '../../../../utilities/util';\r\nimport { Response } from 'src/app/models/response';\r\nimport { Privilegios } from 'src/app/models/login';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\n\r\n\r\n\r\nconst util: Util = new Util();\r\nconst messages: MessagesError = new MessagesError();\r\nconst messagesServer: Messages = new Messages();\r\n\r\n@Component({\r\n  selector: 'app-cambio-pass',\r\n  templateUrl: './cambio-pass.component.html',\r\n  styleUrls: ['./cambio-pass.component.css']\r\n})\r\nexport class CambioPassComponent implements OnInit {\r\n  arrPrivilegios :Array<Privilegios>;\r\n  statusGenerales=0\r\n  statusPass=0\r\n  password: string = \"\";\r\n  nameComponent = '';\r\n  nameButtom:string\r\n  pattern = \"[0-9]+\";\r\n  pattern3 = \"(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\\\w\\\\s]).{1,}\";\r\n  passwordForm = this._formB.group({\r\n    actualPassword: ['', Validators.required],\r\n    newPassword: ['', [Validators.required, Validators.minLength(1),Validators.maxLength(8)]],\r\n    confirmPassword: ['', [Validators.required, Validators.minLength(1),Validators.maxLength(8)]]\r\n  });\r\n\r\n  loading = false;\r\n\r\n  constructor(\r\n    private _formB: FormBuilder,\r\n    private auth: AuthenticationService,\r\n    private loginService: LoginService,\r\n    private privilegiosService: PrivilegiosServiceService,\r\n    public httpClient: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    this.privilegiosService.getPrivilegios().subscribe((data)=>{\r\n      this.arrPrivilegios = data;\r\n    });\r\n    this.privilegiosService.setPrivilegios();\r\n    this.arrPrivilegios.forEach((record)=>{\r\n      if(record.descripcion.includes(\"GuardarContrasena\")){\r\n        this.nameButtom = record.etiqueta\r\n        this.statusPass = record.status\r\n      }\r\n      if(record.idprivilegio == 6){\r\n        this.nameComponent = record.etiqueta\r\n      }\r\n    })\r\n  }\r\n\r\n  get f() {\r\n    return this.passwordForm.controls;\r\n  }\r\n\r\n  isValid(): boolean {\r\n    return !this.passwordForm.valid;\r\n  }\r\n\r\n  validate(): void {\r\n    // if (this.passwordForm.get('newPassword').value != this.passwordForm.get('actualPassword').value) {\r\n    //   this.submit();\r\n    // } else {\r\n    //   this.passwordForm.controls['newPassword'].setValue(\"\");\r\n    //   this.passwordForm.controls['confirmPassword'].setValue(\"\");\r\n    //   this.passwordForm.controls['newPassword'].setErrors({ 'incorrect': ' : Contraseña nueva igual a contraseña actual' });\r\n    //   this.passwordForm.controls['confirmPassword'].setErrors({ 'incorrect': ' : Contraseña nueva igual a contraseña actual' });\r\n    // }\r\n  \r\n\r\n    if (this.passwordForm.get('newPassword').value == this.passwordForm.get('confirmPassword').value) {\r\n      if (this.passwordForm.get('newPassword').value != this.passwordForm.get('actualPassword').value) {\r\n        this.submit();\r\n      } else {\r\n        this.passwordForm.controls['newPassword'].setValue(\"\");\r\n        this.passwordForm.controls['confirmPassword'].setValue(\"\");\r\n        this.passwordForm.controls['newPassword'].setErrors({ 'incorrect': ' : Contraseña nueva igual a contraseña actual' });\r\n        this.passwordForm.controls['confirmPassword'].setErrors({ 'incorrect': ' : Contraseña nueva igual a contraseña actual' });\r\n      }\r\n    } else {\r\n      this.passwordForm.controls['newPassword'].setValue(\"\");\r\n      this.passwordForm.controls['confirmPassword'].setValue(\"\");\r\n      this.passwordForm.controls['newPassword'].setErrors({'incorrect': ' : Contraseña no coincide' });\r\n      this.passwordForm.controls['confirmPassword'].setErrors({ 'incorrect': ' : Contraseña no coincide' });\r\n    }\r\n  }\r\n\r\n\r\n  submit(): void {\r\n    this.loading = true;\r\n    let request = new changePasswordRequest();\r\n    console.log(this.auth.currentUserValue);\r\n    let currentSession = this.auth.currentSession;\r\n    request.userName = currentSession.user.userName;\r\n    request.newPassword = btoa(this.passwordForm.get('confirmPassword').value);\r\n    request.actualPassword = btoa(this.passwordForm.get('actualPassword').value);\r\n    request.lastLoginDate = currentSession.user.lastLoginDate;\r\n\r\n    this.executeChangePassword(request);\r\n\r\n  }\r\n\r\n  private executeChangePassword(request: changePasswordRequest) {\r\n    // request.ip = sessionStorage.getItem('ip');\r\n    // this.doChange(request);\r\n    if (!sessionStorage.getItem('ip')) {\r\n      this.httpClient.get<any>(environment.API_IPIFY).subscribe(res => {\r\n        request.ip = res.ip;\r\n        this.doChange(request);\r\n      }, () => {\r\n        util.errorToast(messages._500_GENERAL_ERROR);\r\n      });\r\n    } else {\r\n      request.ip = sessionStorage.getItem('ip');\r\n      this.doChange(request);\r\n    }\r\n  }\r\n\r\n  private doChange(request: changePasswordRequest) {\r\n    this.loginService.changePassword<Response<LoginResponse>>(request).subscribe(data => {\r\n      this.loading = false;\r\n      this.auth.refreshToken(data.data.token);\r\n      // this.auth.loadHomeByRole();\\\r\n      util.bottomStartOk(messagesServer.MSG_EMERGENTE_TRANSACCION_OK);\r\n      this.passwordForm.reset()\r\n    }, error => {\r\n      this.loading = false;\r\n      // console.log('unsuccessfull', error);\r\n      if (error.status === 400 || error.status === 404) {\r\n        this.passwordForm.controls['actualPassword'].setValue(\"\");\r\n        this.passwordForm.controls['actualPassword'].setErrors({ 'incorrect': ' : Contraseña Incorrecta' });\r\n        util.errorToast(messages._ERROR_LOGIN_CHANGE_CURRENT_PASS_INCORRECT);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  public getFormControl(controlName: string): AbstractControl {\r\n    return this.passwordForm.controls[controlName];\r\n  }\r\n\r\n}\r\n","<app-mi-perfil *ngIf=\"statusGenerales != 185\">\r\n</app-mi-perfil>\r\n<div class=\"row mt-5\">\r\n</div>\r\n<app-cambio-pass *ngIf=\"statusPass != 185\">\r\n</app-cambio-pass>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GeneralesComponent } from './components/generales/generales.component';\r\nimport { RoleBaseAuthorization } from 'src/app/models/login';\r\nimport { AuthGuardGuard } from 'src/app/utilities/auth-guard.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', redirectTo:'',pathMatch: 'full'\r\n  },\r\n  {\r\n    path: 'mi-perfil', component: GeneralesComponent,\r\n    canActivate:[AuthGuardGuard],\r\n    data:{ \r\n      breadcrumb:'Mi perfil', \r\n      page:\"/mi-perfil\",\r\n      data:[ RoleBaseAuthorization.ADMIN,\r\n        RoleBaseAuthorization.COORDINADOR]\r\n    },\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PerfilRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Privilegios } from 'src/app/models/login';\r\nimport { PrivilegiosServiceService } from 'src/app/service/privilegios-service.service';\r\n\r\n@Component({\r\n  selector: 'app-generales',\r\n  templateUrl: './generales.component.html',\r\n  styleUrls: ['./generales.component.css']\r\n})\r\nexport class GeneralesComponent implements OnInit {\r\n  arrPrivilegios :Array<Privilegios>;\r\n  statusGenerales=0\r\n  statusPass=0\r\n  nameComponent: string= '';\r\n  constructor( private privilegiosService: PrivilegiosServiceService ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.privilegiosService.getPrivilegios().subscribe((data)=>{\r\n      this.arrPrivilegios = data;\r\n    });\r\n    this.privilegiosService.setPrivilegios();\r\n    console.log(this.arrPrivilegios)\r\n    this.arrPrivilegios.forEach((record)=>{\r\n      if(record.descripcion == \"Generales\"){\r\n        this.statusGenerales = record.status\r\n      }if(record.descripcion == \"Contrasena\"){\r\n        this.statusPass = record.status\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PerfilRoutingModule } from './perfil-routing.module';\r\nimport { GeneralesComponent } from './components/generales/generales.component';\r\nimport { PerfilComponent } from './perfil.component';\r\nimport { MiPerfilComponent } from './components/mi-perfil/mi-perfil.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { CambioPassComponent } from './components/cambio-pass/cambio-pass.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GeneralesComponent,\r\n    PerfilComponent,\r\n    MiPerfilComponent,\r\n    CambioPassComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PerfilRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],exports:[\r\n    MiPerfilComponent,\r\n    CambioPassComponent\r\n  ]\r\n})\r\nexport class PerfilModule { }\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { UtilHttpService } from '../utilities/util-http.service';\r\nimport { Observable } from 'rxjs';\r\nimport { ViewUser } from '../models/viewUser';\r\nimport { ListByProfiles } from '../models/viewUser';\r\nimport { AssignedUnassignedList } from '../models/AssignedUnassignedList';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService extends UtilHttpService {\r\n\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n    this.port = this.PORT_USER;\r\n  }\r\n\r\n  getUserByProfile<Response>(profile: String): Observable<Response> {\r\n    //  console.log(this.URL_MODULE_USER + this.SERVICE_GET_USER_BY_PROFILE +\"/\"+ profile);\r\n    return super.get(this.URL_MODULE_USER + this.SERVICE_GET_USER_BY_PROFILE + \"/\" + profile);\r\n  }\r\n\r\n  getUser<Response>(profiles: ListByProfiles): Observable<Response> {\r\n    return super.post(this.URL_MODULE_USER + this.SERVICE_GET_USER_BY_PROFILE, profiles);\r\n\r\n  }\r\n\r\n  sendUserEmail<Response>(users: ViewUser[]): Observable<Response> {\r\n    return super.post(this.URL_MODULE_USER + this.SERVICE_POST_SEND_MAIL, users);\r\n  }\r\n\r\n  getUserAssigUnAssig<Response>( idQuest: number, idTimeFrame: number): Observable<Response> {\r\n    return super.get(this.URL_MODULE_USER + this.SERVICE_GET_ASSIGN1 + '/' + idQuest +\r\n      this.SERVICE_GET_ASSIGN2 + '/' + idTimeFrame  );\r\n  }\r\n\r\n  upDateData<Response>(request:any){\r\n    return super.post(this.URL_MODULE_USER + this.SERVICE_UPDATE_DATA_USER, request)\r\n  }\r\n  getById<Response>(request:number){\r\n    return super.get(this.URL_MODULE_USER+'/'+request)\r\n  }\r\n\r\n  getHeaders<Response>(){\r\n    return super.get(this.URL_MODULE_USER+this.SERVICE_GET_HEADERS)\r\n  }\r\n  \r\n  getDataUsers<Response>(request?:number){\r\n    return super.put(this.URL_MODULE_USER+this.SERVICE_GET_DATA_USERS,null);\r\n  }\r\n  getDataUsersByConf<Response>(request?:number){\r\n    return super.put(this.URL_MODULE_USER+this.SERVICE_GET_USERS_BY_CONF+'/'+request,null);\r\n  }\r\n  \r\n  getDataFilter<response>(request:any){\r\n    return super.put(this.URL_MODULE_USER+this.SERVICE_GET_DATA_FILTER,request);\r\n  }\r\n  \r\n  putResetStatusPass(id:number, status:boolean){\r\n    return super.put(this.URL_MODULE_USER + this.SERVICE_PUT_RESET_PASS + '/'+id+'/'+status,null);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}